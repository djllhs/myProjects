{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/1.png","path":"images/1.png","modified":0,"renderable":0},{"_id":"source/images/2.png","path":"images/2.png","modified":0,"renderable":0},{"_id":"source/images/3.png","path":"images/3.png","modified":0,"renderable":0},{"_id":"source/images/4.png","path":"images/4.png","modified":0,"renderable":0},{"_id":"source/images/5.png","path":"images/5.png","modified":0,"renderable":0},{"_id":"themes/Yelee/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/Yelee/source/background/bg-1.jpg","path":"background/bg-1.jpg","modified":0,"renderable":1},{"_id":"themes/Yelee/source/background/bg-4.jpg","path":"background/bg-4.jpg","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/CSDN.png","path":"img/CSDN.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/AcFun.png","path":"img/AcFun.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/Coding.png","path":"img/Coding.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/Plunker.png","path":"img/Plunker.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/TiddlyWiki.png","path":"img/TiddlyWiki.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/LOFTER.png","path":"img/LOFTER.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/V2EX.png","path":"img/V2EX.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/SegmentFault.png","path":"img/SegmentFault.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/bilibili.png","path":"img/bilibili.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/niconico.png","path":"img/niconico.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/Quora.png","path":"img/Quora.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/博客园.png","path":"img/博客园.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/新浪微博.png","path":"img/新浪微博.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/网易云音乐.png","path":"img/网易云音乐.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/知乎.png","path":"img/知乎.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/虾米音乐.png","path":"img/虾米音乐.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/简书.png","path":"img/简书.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/豆瓣.png","path":"img/豆瓣.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/js/GithubRepoWidget.js","path":"js/GithubRepoWidget.js","modified":0,"renderable":1},{"_id":"themes/Yelee/source/js/instagram.js","path":"js/instagram.js","modified":0,"renderable":1},{"_id":"themes/Yelee/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/Yelee/source/js/pc.js","path":"js/pc.js","modified":0,"renderable":1},{"_id":"themes/Yelee/source/js/toc.js","path":"js/toc.js","modified":0,"renderable":1},{"_id":"themes/Yelee/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/Yelee/source/js/mobile.js","path":"js/mobile.js","modified":0,"renderable":1},{"_id":"themes/Yelee/source/background/bg-2.jpg","path":"background/bg-2.jpg","modified":0,"renderable":1},{"_id":"themes/Yelee/source/background/bg-5.jpg","path":"background/bg-5.jpg","modified":0,"renderable":1},{"_id":"themes/Yelee/source/background/bg-6.jpg","path":"background/bg-6.jpg","modified":0,"renderable":1},{"_id":"themes/Yelee/source/background/bg-3.jpg","path":"background/bg-3.jpg","modified":0,"renderable":1},{"_id":"themes/Yelee/source/background/backup/bg-2.jpg","path":"background/backup/bg-2.jpg","modified":0,"renderable":1},{"_id":"themes/Yelee/source/background/backup/bg-3.jpg","path":"background/backup/bg-3.jpg","modified":0,"renderable":1},{"_id":"themes/Yelee/source/background/backup/bg-1.jpg","path":"background/backup/bg-1.jpg","modified":0,"renderable":1},{"_id":"themes/Yelee/source/background/backup/bg-4.jpg","path":"background/backup/bg-4.jpg","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/author.jpg","path":"img/author.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/Yelee/README.md","hash":"12bc9cdb68f51df81bcc36a5263e0a6c5860f646","modified":1495679840648},{"_id":"themes/Yelee/.gitignore","hash":"79b4a9ac435bc5833a0bc461ebacb10908b34ed3","modified":1495679840645},{"_id":"themes/Yelee/_config.yml","hash":"e11c32a6ad8c7947ae0e3cf589c48eee42eb8da4","modified":1495782855021},{"_id":"themes/Yelee/package.json","hash":"0199dfb3d44cf520b67464817d13c44a7766b8d6","modified":1495679840729},{"_id":"source/_posts/The Definitive Guide of javascript.md","hash":"cb5be70cc08ca3aed0c458341d11d1cbfd85f00b","modified":1495766016469},{"_id":"source/_posts/javascript standard.md","hash":"934b6b29f4e8ff285cb6856f911dcc95f120294f","modified":1495699502227},{"_id":"source/_posts/oss-hexo-publish.md","hash":"9d2fc3f7adea9f8a4c813e3df84c08ba98a674e7","modified":1495795454510},{"_id":"source/about/index.md","hash":"7d0c7d4cbf9f9f13971a83a3f38fada23d669477","modified":1495703544341},{"_id":"source/images/1.png","hash":"320e712c823f9716f2f00c531eaf3e2d29a506a0","modified":1495793237539},{"_id":"source/images/2.png","hash":"ff24f786d5f24f3624447a326a689b6667bd896a","modified":1495793685210},{"_id":"source/images/3.png","hash":"cdcd99361f26aaabfa2a51299a54ef92d7bdfd2b","modified":1495793840988},{"_id":"source/images/4.png","hash":"c23ad90e9ca5a513bcd5784da410a9d1a53a57b1","modified":1495794059410},{"_id":"source/images/5.png","hash":"8dd2ee773798e63f89c060dcc75899015dd3b9a2","modified":1495794287827},{"_id":"themes/Yelee/.github/ISSUE_TEMPLATE.md","hash":"ce083abf397c12747893a23e901d46558b53e0ad","modified":1495679840643},{"_id":"themes/Yelee/languages/default.yml","hash":"3bdad891c90029447b4fbaedbbb11b8a59d06418","modified":1495679840653},{"_id":"themes/Yelee/languages/en.yml","hash":"ff991c2c80d9ab69c984acb1c40480c8b98be2bc","modified":1495679840655},{"_id":"themes/Yelee/languages/zh-Hans.yml","hash":"4fa4068a65089810e7dd95692f9157eb80c2e8de","modified":1495679840657},{"_id":"themes/Yelee/languages/zh-Hant-HK.yml","hash":"bbc73dcd9170fe9efaab6fbbe1571886e0b8aa89","modified":1495679840659},{"_id":"themes/Yelee/languages/zh-Hant-TW.yml","hash":"88b4678bba940bc270c7aea2debbf869ecf6cc18","modified":1495679840661},{"_id":"themes/Yelee/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1495679840719},{"_id":"themes/Yelee/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1495679840720},{"_id":"themes/Yelee/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1495679840722},{"_id":"themes/Yelee/layout/layout.ejs","hash":"17720dae7683f2a1c2928149df16008373e417e4","modified":1495703286493},{"_id":"themes/Yelee/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1495679840725},{"_id":"themes/Yelee/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1495679840726},{"_id":"themes/Yelee/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1495679840728},{"_id":"themes/Yelee/source/apple-touch-icon.png","hash":"c0fda117fa166d63b9eb690cc5e4fb2caaf493b3","modified":1495679840731},{"_id":"themes/Yelee/layout/_partial/after-footer.ejs","hash":"748391b89b661fa1ed7da0b15ed6870981ec4dc3","modified":1495679840665},{"_id":"themes/Yelee/layout/_partial/archive-post.ejs","hash":"0ecc2ad07b4abad80f564ac1858c50bcbdff34f8","modified":1495679840666},{"_id":"themes/Yelee/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1495679840669},{"_id":"themes/Yelee/layout/_partial/article.ejs","hash":"afd85b362d732fa9b439af7dc44b657d0d1aae3d","modified":1495679840671},{"_id":"themes/Yelee/layout/_partial/background.ejs","hash":"aeef39abef66ee0bd6c9efe856eaeb1b81416d41","modified":1495679840673},{"_id":"themes/Yelee/layout/_partial/footer.ejs","hash":"82653e3bbdc605b51e1b0a36e30f3ac1180c838e","modified":1495679840687},{"_id":"themes/Yelee/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1495679840688},{"_id":"themes/Yelee/layout/_partial/head.ejs","hash":"55e90c3d5de6d7ffcfe26c4dc22189a7a27b6651","modified":1495679840690},{"_id":"themes/Yelee/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1495679840691},{"_id":"themes/Yelee/layout/_partial/ie-updater.ejs","hash":"8d1e1f3953efbcf5ec84a451439a62a1c95b55d7","modified":1495679840692},{"_id":"themes/Yelee/layout/_partial/left-col.ejs","hash":"90fd7c763faf8d64d58612f592cbacbefdaea161","modified":1495679840694},{"_id":"themes/Yelee/layout/_partial/mathjax.ejs","hash":"ce868f8b2b5b377cadc270e3a5bb5826f8bf0dee","modified":1495679840696},{"_id":"themes/Yelee/layout/_partial/mobile-nav.ejs","hash":"306be982577b0ef968f855d0dfeaab6b180b8a50","modified":1495679840697},{"_id":"themes/Yelee/layout/_partial/open-in-new-tab.ejs","hash":"a59d4c768009dd621e741a29cf6446ebc2668fe9","modified":1495679840698},{"_id":"themes/Yelee/layout/_partial/page.ejs","hash":"cfce60062cdb60893baeda7fa0266ae4086c2bc8","modified":1495679840700},{"_id":"themes/Yelee/layout/_partial/post-nav-button.ejs","hash":"0a98bffdd14f6677721841c0ac4487a86c77266c","modified":1495679840701},{"_id":"themes/Yelee/layout/_partial/scrolling-button.ejs","hash":"c5e1c3a8e1e6b0d927ac25a7fb8720ee7ac83ad8","modified":1495679840712},{"_id":"themes/Yelee/layout/_partial/tab-title-change.ejs","hash":"7c4a7177e0c77de2d7607ca29fc395abebd34db7","modified":1495679840713},{"_id":"themes/Yelee/layout/_partial/tag-cloud-page.ejs","hash":"c7b25ef136e129c948ac37d6ff19e8815ab9fee6","modified":1495679840715},{"_id":"themes/Yelee/layout/_partial/toc.ejs","hash":"7ee88b1a98eea5cbd44c0f9a11b86b46aa2d6752","modified":1495679840717},{"_id":"themes/Yelee/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1495679840755},{"_id":"themes/Yelee/source/css/_variables.styl","hash":"f429eb9bc9f0a270ec68c4f4c63903250746a01c","modified":1495679840796},{"_id":"themes/Yelee/source/css/style.styl","hash":"b285f9a75abd09c7d06fe89e70f9e1819eac27dd","modified":1495679840798},{"_id":"themes/Yelee/source/background/bg-1.jpg","hash":"48b30b648d89b9bf6ad5a84b089792baf3ce78e7","modified":1495704115510},{"_id":"themes/Yelee/source/background/bg-4.jpg","hash":"0361ba22c07f8d9149cc2d43d7eaac17e3ece96e","modified":1495705492073},{"_id":"themes/Yelee/source/img/CSDN.png","hash":"59f7d89eda8a7310a0ee1607e153c0829af7eb6e","modified":1495679840802},{"_id":"themes/Yelee/source/img/AcFun.png","hash":"df6b0fa39ced4dc988359fc7b7cd1e5403de08a6","modified":1495679840801},{"_id":"themes/Yelee/source/img/Coding.png","hash":"afb4bce19bebf61e3c486fd5199369d6eb191b78","modified":1495679840804},{"_id":"themes/Yelee/source/img/Plunker.png","hash":"14a0054b9b4a0e459987f34b9ab48ab22dbe5cf9","modified":1495679840806},{"_id":"themes/Yelee/source/img/TiddlyWiki.png","hash":"b7f68f8f9c45561a9455aee0bfb80e35cae6f8df","modified":1495679840810},{"_id":"themes/Yelee/source/img/LOFTER.png","hash":"88670eaea8612839e9d6a40a3636e4231ab56c0f","modified":1495679840805},{"_id":"themes/Yelee/source/img/V2EX.png","hash":"d0768de8555f9be0ee8ce956198cef454d4e4d7c","modified":1495679840812},{"_id":"themes/Yelee/source/img/SegmentFault.png","hash":"1afbc7e575e2e9ed9404be84a3f92f7ca8345a9c","modified":1495679840809},{"_id":"themes/Yelee/source/img/avatar.png","hash":"e4bca3d60087cd6e775d8e2aa2bf0d35e3859592","modified":1495679840814},{"_id":"themes/Yelee/source/img/bilibili.png","hash":"be37b7e9a091c8547b8ee8b9d29583af8ded61c0","modified":1495679840815},{"_id":"themes/Yelee/source/img/niconico.png","hash":"fabc7ca45e9ee5698db33a25de8b1f8a7c7d6723","modified":1495679840817},{"_id":"themes/Yelee/source/img/Quora.png","hash":"1a624ade0d07f2482b21bef1e2a5ddd0110ba352","modified":1495679840808},{"_id":"themes/Yelee/source/img/scrollbar_arrow.png","hash":"af987032f2171867bb58b165d2180eb5dcbea637","modified":1495679840818},{"_id":"themes/Yelee/source/img/博客园.png","hash":"5ff6f4c9f1fc1695217a57436d58b246d9d2f197","modified":1495679840820},{"_id":"themes/Yelee/source/img/新浪微博.png","hash":"7a145ed1daee0c172cda77098f4254fc21f9eeee","modified":1495679840821},{"_id":"themes/Yelee/source/img/网易云音乐.png","hash":"4fd1275fd988584811cf710207eb077f2306f271","modified":1495679840825},{"_id":"themes/Yelee/source/img/知乎.png","hash":"ed6d3c304789e112d09f40784fa6add1f1a38bd6","modified":1495679840823},{"_id":"themes/Yelee/source/img/虾米音乐.png","hash":"a0039b049779b1f37c0b0b91760943b7bf25c8f1","modified":1495679840827},{"_id":"themes/Yelee/source/img/简书.png","hash":"5c91ee83cab4abe160240e09de345b6935c8cb37","modified":1495679840824},{"_id":"themes/Yelee/source/img/豆瓣.png","hash":"f1fc97f98612bcdf4a681542e5388483b40a5300","modified":1495679840828},{"_id":"themes/Yelee/source/js/GithubRepoWidget.js","hash":"5fb1bf6cf973062771ddf275ceeca5bc69c81c77","modified":1495679840830},{"_id":"themes/Yelee/source/js/instagram.js","hash":"81e13cacf4947118ed1920e59b04ccf6beef6b86","modified":1495679840832},{"_id":"themes/Yelee/source/js/main.js","hash":"369774a7ff45a2e5117a796330a04aeb50a61fdf","modified":1495679840834},{"_id":"themes/Yelee/source/js/pc.js","hash":"bc289c5dc610e2a34d308daeb9adea96d01f7788","modified":1495679840837},{"_id":"themes/Yelee/source/js/toc.js","hash":"973c1a4e2c9de8f4f662b99623027658fe6d94c2","modified":1495679840840},{"_id":"themes/Yelee/source/js/search.js","hash":"001e324844e63f3bfb6f60d173b9c6954127be0b","modified":1495679840839},{"_id":"themes/Yelee/source/js/mobile.js","hash":"8abc32d18f16db56f51caad607cffb6ca756eca9","modified":1495679840835},{"_id":"themes/Yelee/source/background/bg-2.jpg","hash":"757c5125ccc6173288798cb68f28358aa9b266c7","modified":1495705424264},{"_id":"themes/Yelee/source/background/bg-5.jpg","hash":"1e0a021414525b31602f65c94288130a85247a96","modified":1495705219672},{"_id":"themes/Yelee/source/background/bg-6.jpg","hash":"51b427f07ffc6f2ad97651f23cc16e8f19ed02f9","modified":1495679840754},{"_id":"themes/Yelee/source/background/bg-3.jpg","hash":"a6aa3ce76f118d67fd039f253181fe5c93b2f9a7","modified":1495704710462},{"_id":"themes/Yelee/layout/_partial/comments/click2show.ejs","hash":"ecc4d3ca997c6fd127e00fa2edf0158b925d1d3e","modified":1495679840676},{"_id":"themes/Yelee/layout/_partial/comments/disqus.ejs","hash":"df7ee469b648b12b5ee3104ef513d54cbb7418af","modified":1495679840680},{"_id":"themes/Yelee/layout/_partial/comments/count-comment.ejs","hash":"ada2032e401b73b312c50b75bdbb8ee71d5a291e","modified":1495679840678},{"_id":"themes/Yelee/layout/_partial/comments/duoshuo.ejs","hash":"e7f12f1246a67a5b556c2d5b37dc78733f1cf15a","modified":1495679840683},{"_id":"themes/Yelee/layout/_partial/comments/youyan.ejs","hash":"d150085faee4809ba50f69c55d904605699040cb","modified":1495679840685},{"_id":"themes/Yelee/layout/_partial/post/category.ejs","hash":"08c8d98bc6a73d3f72a3b0b30521ff28e1b657a7","modified":1495679840703},{"_id":"themes/Yelee/layout/_partial/post/nav.ejs","hash":"6f531dbc9cc7ae42d2486d6707f826cfe7d9d8bc","modified":1495679840706},{"_id":"themes/Yelee/layout/_partial/post/date.ejs","hash":"329ed372296a86bce73ff8936af5601723fdd70a","modified":1495679840705},{"_id":"themes/Yelee/layout/_partial/post/share.ejs","hash":"58c2db54a9867aaafe68a7f052b04701c7c3df0f","modified":1495679840708},{"_id":"themes/Yelee/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1495679840711},{"_id":"themes/Yelee/layout/_partial/post/tag.ejs","hash":"7d2693a1162bf26e4b1ae9b789e0b2a2637ddbd5","modified":1495679840709},{"_id":"themes/Yelee/source/css/_partial/archive.styl","hash":"102c23dbb6cde3cbfca3b151c742e0d77911186e","modified":1495679840757},{"_id":"themes/Yelee/source/css/_partial/article.styl","hash":"190828c822096bb3098a7d14c3340eb004057aa0","modified":1495679840759},{"_id":"themes/Yelee/source/css/_partial/footer.styl","hash":"a419108f1b820c59fcc56d218bfaaa4ffc4f1d4d","modified":1495679840772},{"_id":"themes/Yelee/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1495679840774},{"_id":"themes/Yelee/source/css/_partial/highlight.styl","hash":"4e34bf9340ce9b15d2d59fc4ea761d1d110927cf","modified":1495679840775},{"_id":"themes/Yelee/source/css/_partial/instagram.styl","hash":"a093443add2f529396d6b6bdef1675bc3acf3958","modified":1495679840777},{"_id":"themes/Yelee/source/css/_partial/main.styl","hash":"405db411896f3c7de9e7dd27e58c920fb90b9834","modified":1495679840778},{"_id":"themes/Yelee/source/css/_partial/mobile-slider.styl","hash":"39db458d4e9f6973afc1390b4d3fc0291fff4c40","modified":1495679840779},{"_id":"themes/Yelee/source/css/_partial/mobile.styl","hash":"dfb20f2515a26d75e42fe09741e91cc889426b11","modified":1495679840781},{"_id":"themes/Yelee/source/css/_partial/page.styl","hash":"ca3f871adf8fdb296e4394070605dded53d93cb2","modified":1495679840782},{"_id":"themes/Yelee/source/css/_partial/scroll.styl","hash":"f32deb9192568a2ea789d77a23a08d07f4e57d59","modified":1495679840784},{"_id":"themes/Yelee/source/css/_partial/search.styl","hash":"688ff535a6005be02d947be75d22cfe1f8ce72cd","modified":1495679840785},{"_id":"themes/Yelee/source/css/_partial/share.styl","hash":"88c1277397b71eb1f3473a94d9542314f983cd09","modified":1495679840787},{"_id":"themes/Yelee/source/css/_partial/tagcloud.styl","hash":"b38b275728bfe11809defe1077b03cb423c3c92f","modified":1495679840789},{"_id":"themes/Yelee/source/css/_partial/toc.styl","hash":"8f2a057dc072285093e37f1f645e9cb53608642f","modified":1495679840790},{"_id":"themes/Yelee/source/css/_partial/wheelmenu.styl","hash":"9e57421eab562ea13d0ed2b2e1415eee79fa23d0","modified":1495679840791},{"_id":"themes/Yelee/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1495679840793},{"_id":"themes/Yelee/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1495679840795},{"_id":"themes/Yelee/source/background/backup/bg-2.jpg","hash":"7ae358f3ab8b41558444053400e796c41b3ba0e2","modified":1495679840736},{"_id":"themes/Yelee/source/background/backup/bg-3.jpg","hash":"1a06d3a660bfb99b62d760e4e1e09de168a4c74c","modified":1495679840739},{"_id":"themes/Yelee/source/background/backup/bg-1.jpg","hash":"31d7bb15211000c05656899302f8ec9ee3de0e9f","modified":1495679840735},{"_id":"themes/Yelee/source/background/backup/bg-4.jpg","hash":"6df1383d0f6134016d844df9abb740a6e0c0b2c5","modified":1495679840741},{"_id":"themes/Yelee/source/img/author.jpg","hash":"7682d2cce1a70aef3d3957886476a082c74c04a2","modified":1495680581835},{"_id":"themes/Yelee/source/css/_partial/customise/blockquote.styl","hash":"5e6edb9ad49288743ed550a2bd8c9a3c8e208455","modified":1495679840761},{"_id":"themes/Yelee/source/css/_partial/customise/code-block.styl","hash":"4db1a992a06fd92b779f0afc9bb8bb3667bdb101","modified":1495679840762},{"_id":"themes/Yelee/source/css/_partial/customise/color-scheme.styl","hash":"b58262a9f8903e75df431291745e19ccd8ff243a","modified":1495679840764},{"_id":"themes/Yelee/source/css/_partial/customise/heading.styl","hash":"c29799f09ebd87767fd9cc3b1fa795db44a94670","modified":1495679840766},{"_id":"themes/Yelee/source/css/_partial/customise/inline-code.styl","hash":"a15292b2b3541ea022c0fb7441875192dee5ad9d","modified":1495679840767},{"_id":"themes/Yelee/source/css/_partial/customise/social-icon.styl","hash":"bfa5c863d474266f32a570e34a0effda964f7f40","modified":1495679840770},{"_id":"themes/Yelee/source/css/_partial/customise/list.styl","hash":"7db683e2837a078ad7817fb88914535588e49cfa","modified":1495679840769},{"_id":"public/archives/index.html","hash":"ae6ef1d2a17d3717217c05ef0fe0641e810dacdd","modified":1495795333537},{"_id":"public/archives/2017/index.html","hash":"b8be3a6e758703ef62555010958032265f6b27b6","modified":1495795333544},{"_id":"public/archives/2017/05/index.html","hash":"18b4a987f9a33100eaf62aef50b3f08d8b718f37","modified":1495795333545},{"_id":"public/index.html","hash":"9b0c1efe0c4e58698125289aff36bc985c7f6002","modified":1495795333545},{"_id":"public/about/index.html","hash":"aa07fa96953ed39d8b27dcf43c025625b33f400c","modified":1495795333545},{"_id":"public/2017/05/26/The Definitive Guide of javascript/index.html","hash":"4a8d05d8aab7e403063e69866602704db637c055","modified":1495795333545},{"_id":"public/2017/05/26/javascript standard/index.html","hash":"ebfd1bd03c3ffc619f28ad766d546dc4b57fbe60","modified":1495795333545},{"_id":"public/2017/05/26/oss-hexo-publish/index.html","hash":"08f1c6183c2cec17dcab6ed95c262ebafa2525f2","modified":1495795457720},{"_id":"public/apple-touch-icon.png","hash":"c0fda117fa166d63b9eb690cc5e4fb2caaf493b3","modified":1495795333563},{"_id":"public/background/bg-1.jpg","hash":"48b30b648d89b9bf6ad5a84b089792baf3ce78e7","modified":1495795333563},{"_id":"public/background/bg-4.jpg","hash":"0361ba22c07f8d9149cc2d43d7eaac17e3ece96e","modified":1495795333563},{"_id":"public/img/CSDN.png","hash":"59f7d89eda8a7310a0ee1607e153c0829af7eb6e","modified":1495795333563},{"_id":"public/img/AcFun.png","hash":"df6b0fa39ced4dc988359fc7b7cd1e5403de08a6","modified":1495795333563},{"_id":"public/img/Coding.png","hash":"afb4bce19bebf61e3c486fd5199369d6eb191b78","modified":1495795333563},{"_id":"public/img/TiddlyWiki.png","hash":"b7f68f8f9c45561a9455aee0bfb80e35cae6f8df","modified":1495795333563},{"_id":"public/img/Plunker.png","hash":"14a0054b9b4a0e459987f34b9ab48ab22dbe5cf9","modified":1495795333563},{"_id":"public/img/SegmentFault.png","hash":"1afbc7e575e2e9ed9404be84a3f92f7ca8345a9c","modified":1495795333563},{"_id":"public/img/LOFTER.png","hash":"88670eaea8612839e9d6a40a3636e4231ab56c0f","modified":1495795333563},{"_id":"public/img/V2EX.png","hash":"d0768de8555f9be0ee8ce956198cef454d4e4d7c","modified":1495795333563},{"_id":"public/img/avatar.png","hash":"e4bca3d60087cd6e775d8e2aa2bf0d35e3859592","modified":1495795333564},{"_id":"public/img/bilibili.png","hash":"be37b7e9a091c8547b8ee8b9d29583af8ded61c0","modified":1495795333564},{"_id":"public/img/niconico.png","hash":"fabc7ca45e9ee5698db33a25de8b1f8a7c7d6723","modified":1495795333566},{"_id":"public/img/scrollbar_arrow.png","hash":"af987032f2171867bb58b165d2180eb5dcbea637","modified":1495795333566},{"_id":"public/img/Quora.png","hash":"1a624ade0d07f2482b21bef1e2a5ddd0110ba352","modified":1495795333566},{"_id":"public/img/新浪微博.png","hash":"7a145ed1daee0c172cda77098f4254fc21f9eeee","modified":1495795333566},{"_id":"public/img/网易云音乐.png","hash":"4fd1275fd988584811cf710207eb077f2306f271","modified":1495795333566},{"_id":"public/img/博客园.png","hash":"5ff6f4c9f1fc1695217a57436d58b246d9d2f197","modified":1495795333566},{"_id":"public/img/虾米音乐.png","hash":"a0039b049779b1f37c0b0b91760943b7bf25c8f1","modified":1495795333566},{"_id":"public/img/知乎.png","hash":"ed6d3c304789e112d09f40784fa6add1f1a38bd6","modified":1495795333566},{"_id":"public/img/简书.png","hash":"5c91ee83cab4abe160240e09de345b6935c8cb37","modified":1495795333566},{"_id":"public/img/豆瓣.png","hash":"f1fc97f98612bcdf4a681542e5388483b40a5300","modified":1495795333566},{"_id":"public/background/backup/bg-2.jpg","hash":"7ae358f3ab8b41558444053400e796c41b3ba0e2","modified":1495795333566},{"_id":"public/background/backup/bg-3.jpg","hash":"1a06d3a660bfb99b62d760e4e1e09de168a4c74c","modified":1495795333566},{"_id":"public/background/backup/bg-1.jpg","hash":"31d7bb15211000c05656899302f8ec9ee3de0e9f","modified":1495795333566},{"_id":"public/background/backup/bg-4.jpg","hash":"6df1383d0f6134016d844df9abb740a6e0c0b2c5","modified":1495795333566},{"_id":"public/images/1.png","hash":"320e712c823f9716f2f00c531eaf3e2d29a506a0","modified":1495795333566},{"_id":"public/images/3.png","hash":"cdcd99361f26aaabfa2a51299a54ef92d7bdfd2b","modified":1495795333566},{"_id":"public/images/4.png","hash":"c23ad90e9ca5a513bcd5784da410a9d1a53a57b1","modified":1495795333566},{"_id":"public/images/5.png","hash":"8dd2ee773798e63f89c060dcc75899015dd3b9a2","modified":1495795333566},{"_id":"public/images/2.png","hash":"ff24f786d5f24f3624447a326a689b6667bd896a","modified":1495795333566},{"_id":"public/background/bg-2.jpg","hash":"757c5125ccc6173288798cb68f28358aa9b266c7","modified":1495795334352},{"_id":"public/background/bg-5.jpg","hash":"1e0a021414525b31602f65c94288130a85247a96","modified":1495795334354},{"_id":"public/background/bg-6.jpg","hash":"51b427f07ffc6f2ad97651f23cc16e8f19ed02f9","modified":1495795334354},{"_id":"public/background/bg-3.jpg","hash":"a6aa3ce76f118d67fd039f253181fe5c93b2f9a7","modified":1495795334354},{"_id":"public/js/GithubRepoWidget.js","hash":"624e81a3b0e57495b0c0e0b3e056296c6e8ae5df","modified":1495795334356},{"_id":"public/js/pc.js","hash":"19a1660b10358046e7a1f398284491519b2ffd47","modified":1495795334356},{"_id":"public/js/main.js","hash":"d58bbc593d94d48e85d4ebfb002910444080cb06","modified":1495795334356},{"_id":"public/js/instagram.js","hash":"f19adbcc0dac33536bc6660598059048ec901882","modified":1495795334356},{"_id":"public/js/toc.js","hash":"72ba1228fc1a44df45b8f4b562eba78594f13016","modified":1495795334356},{"_id":"public/js/search.js","hash":"b456aaab98bbc3b0906f8a16d1e6e4f74dfcffda","modified":1495795334356},{"_id":"public/js/mobile.js","hash":"0f4c1fcd6df47a196ed9495c225173402aa7d769","modified":1495795334356},{"_id":"public/css/style.css","hash":"e62c44a56606d8d75933cdf49a1a0e42d9f81845","modified":1495795334356},{"_id":"public/img/author.jpg","hash":"7682d2cce1a70aef3d3957886476a082c74c04a2","modified":1495795334357}],"Category":[],"Data":[],"Page":[{"title":"This is me","date":"2017-05-25T08:08:38.000Z","_content":"\n### 个人简介\n俗称的女汉子，拥有一个彪悍的内心，不羁的性格。当然，从外表上看是猜不出来这妹纸是个程序员滴~我的生活理念：生活要充满色彩，充满乐趣，做一个不一样的技术性妹纸。\n\n### 技术方向\n前端开发：html、css、js是基本，sass、react、webpack是进阶，了解vue，项目管理当然是git啦。\n也曾经用rn写过两天Android 布局，故略懂一二。\n\n### 兴趣\n* 运动：健身，轮滑，各球类运动也会玩，凡是运动类型的活动基本不会缺席\n* 旅行：四川阿坝出名的景点去了大部分，比如九寨沟，松潘，川主寺，毕棚沟，达古冰山，若尔盖，九曲黄河，红原，阿坝被称为四川的后花园呢。\n当然国内的就去得比较少了，毕竟时间有限，哈哈。云南昆明、大理洱海、丽江古城、香格里拉，都很漂亮。杭州西湖、金山寺人太多了。苏州园林很有艺术感，是个不错的地方\n* 生活：美食，电影，k歌（五音不全，哈哈）也是一样不落下的呢\n\n### 生活态度\n喜欢养生，养生就如保养车一样。身体是革命的本钱，健康是无价的，我最喜欢我爸的一句话：我现在保养身体是为了给你们减轻负担，大半辈子挣的钱不是为了看病的。否则前半辈子辛苦挣的钱用来医治后半辈子的病痛，这样是没有任何意义的。\n","source":"about/index.md","raw":"---\ntitle: This is me\ndate: 2017-05-25 16:08:38\n---\n\n### 个人简介\n俗称的女汉子，拥有一个彪悍的内心，不羁的性格。当然，从外表上看是猜不出来这妹纸是个程序员滴~我的生活理念：生活要充满色彩，充满乐趣，做一个不一样的技术性妹纸。\n\n### 技术方向\n前端开发：html、css、js是基本，sass、react、webpack是进阶，了解vue，项目管理当然是git啦。\n也曾经用rn写过两天Android 布局，故略懂一二。\n\n### 兴趣\n* 运动：健身，轮滑，各球类运动也会玩，凡是运动类型的活动基本不会缺席\n* 旅行：四川阿坝出名的景点去了大部分，比如九寨沟，松潘，川主寺，毕棚沟，达古冰山，若尔盖，九曲黄河，红原，阿坝被称为四川的后花园呢。\n当然国内的就去得比较少了，毕竟时间有限，哈哈。云南昆明、大理洱海、丽江古城、香格里拉，都很漂亮。杭州西湖、金山寺人太多了。苏州园林很有艺术感，是个不错的地方\n* 生活：美食，电影，k歌（五音不全，哈哈）也是一样不落下的呢\n\n### 生活态度\n喜欢养生，养生就如保养车一样。身体是革命的本钱，健康是无价的，我最喜欢我爸的一句话：我现在保养身体是为了给你们减轻负担，大半辈子挣的钱不是为了看病的。否则前半辈子辛苦挣的钱用来医治后半辈子的病痛，这样是没有任何意义的。\n","updated":"2017-05-25T09:12:24.341Z","path":"about/index.html","comments":1,"layout":"page","_id":"cj35px5n80001x8deizf4cbmm","content":"<h3 id=\"个人简介\"><a href=\"#个人简介\" class=\"headerlink\" title=\"个人简介\"></a>个人简介</h3><p>俗称的女汉子，拥有一个彪悍的内心，不羁的性格。当然，从外表上看是猜不出来这妹纸是个程序员滴~我的生活理念：生活要充满色彩，充满乐趣，做一个不一样的技术性妹纸。</p>\n<h3 id=\"技术方向\"><a href=\"#技术方向\" class=\"headerlink\" title=\"技术方向\"></a>技术方向</h3><p>前端开发：html、css、js是基本，sass、react、webpack是进阶，了解vue，项目管理当然是git啦。<br>也曾经用rn写过两天Android 布局，故略懂一二。</p>\n<h3 id=\"兴趣\"><a href=\"#兴趣\" class=\"headerlink\" title=\"兴趣\"></a>兴趣</h3><ul>\n<li>运动：健身，轮滑，各球类运动也会玩，凡是运动类型的活动基本不会缺席</li>\n<li>旅行：四川阿坝出名的景点去了大部分，比如九寨沟，松潘，川主寺，毕棚沟，达古冰山，若尔盖，九曲黄河，红原，阿坝被称为四川的后花园呢。<br>当然国内的就去得比较少了，毕竟时间有限，哈哈。云南昆明、大理洱海、丽江古城、香格里拉，都很漂亮。杭州西湖、金山寺人太多了。苏州园林很有艺术感，是个不错的地方</li>\n<li>生活：美食，电影，k歌（五音不全，哈哈）也是一样不落下的呢</li>\n</ul>\n<h3 id=\"生活态度\"><a href=\"#生活态度\" class=\"headerlink\" title=\"生活态度\"></a>生活态度</h3><p>喜欢养生，养生就如保养车一样。身体是革命的本钱，健康是无价的，我最喜欢我爸的一句话：我现在保养身体是为了给你们减轻负担，大半辈子挣的钱不是为了看病的。否则前半辈子辛苦挣的钱用来医治后半辈子的病痛，这样是没有任何意义的。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"个人简介\"><a href=\"#个人简介\" class=\"headerlink\" title=\"个人简介\"></a>个人简介</h3><p>俗称的女汉子，拥有一个彪悍的内心，不羁的性格。当然，从外表上看是猜不出来这妹纸是个程序员滴~我的生活理念：生活要充满色彩，充满乐趣，做一个不一样的技术性妹纸。</p>\n<h3 id=\"技术方向\"><a href=\"#技术方向\" class=\"headerlink\" title=\"技术方向\"></a>技术方向</h3><p>前端开发：html、css、js是基本，sass、react、webpack是进阶，了解vue，项目管理当然是git啦。<br>也曾经用rn写过两天Android 布局，故略懂一二。</p>\n<h3 id=\"兴趣\"><a href=\"#兴趣\" class=\"headerlink\" title=\"兴趣\"></a>兴趣</h3><ul>\n<li>运动：健身，轮滑，各球类运动也会玩，凡是运动类型的活动基本不会缺席</li>\n<li>旅行：四川阿坝出名的景点去了大部分，比如九寨沟，松潘，川主寺，毕棚沟，达古冰山，若尔盖，九曲黄河，红原，阿坝被称为四川的后花园呢。<br>当然国内的就去得比较少了，毕竟时间有限，哈哈。云南昆明、大理洱海、丽江古城、香格里拉，都很漂亮。杭州西湖、金山寺人太多了。苏州园林很有艺术感，是个不错的地方</li>\n<li>生活：美食，电影，k歌（五音不全，哈哈）也是一样不落下的呢</li>\n</ul>\n<h3 id=\"生活态度\"><a href=\"#生活态度\" class=\"headerlink\" title=\"生活态度\"></a>生活态度</h3><p>喜欢养生，养生就如保养车一样。身体是革命的本钱，健康是无价的，我最喜欢我爸的一句话：我现在保养身体是为了给你们减轻负担，大半辈子挣的钱不是为了看病的。否则前半辈子辛苦挣的钱用来医治后半辈子的病痛，这样是没有任何意义的。</p>\n"}],"Post":[{"title":"《JavaScript权威指南》笔记","_content":"阅读《javascript权威指南》一书做的简要笔记，js基础非常重要，在学习新技术的同时也不忘夯实基础。该书是javascript程序员的必备参考……内容组织得很好，而且非常详细，值得阅读\n<!-- more -->\n\n@(我的笔记)\n\n## 一、词法结构\n### 1. 字符集\n*  区分大小写，关键字、变量、函数名和所有的标识符都必须采取一致的大小写形式。\n*  空格、换行符和格式控制符， js一般会忽略空格和换行符，Unicode格式控制符可用在注释、字符串直接量和正则表达式直接量中，不能用在标识符（如变量名）中\n*  Unicode转义序列，以\\u为前缀，用法同上\n### 2.注释\n\n    // 这里是单行注释\n    /*这里是一段注释*/ // 这里是另一段注释\n    /*\n     *这又是一段注释\n     *这里的注释可以连写多行\n     */\n\n### 3.直接量\n即程序中直接使用的数据值，如12,1.2，“hello world”等\n### 4.标识符和保留字\n1. 标识符\n+ 必须以字母、下划线（_）或美元符号（$）开始\n+ 数字不允许作为首字符\n\n2. 保留字\n\n\t\tbreak     delete    function    return    typeof\n\t\tcase      do        if          switch    var\n\t\tcatch     else      in          this      void\n\t\tcontinue  false     instanceof  throw     while\n\t\tdebugger  for       new         true      with\n\t\tdefault   finally   null        try\n\n\n- ECMAScript5 关键字\n\n\t\t\tclass  const  enum  export  extends  import  super\n\n- 严格模式下的保留字\n\n\t\t\timplements let private public  yield  interface  package  protected static\n\n- JavaScript预定义的全局变量和函数\n\n\t\t\targuments           encodeURI             Infinity   Number         RegExp\n\t\t\tArray               encodeURIComponent    isFinite   Object         String\n\t\t\tBoolean             Error                 isNaN      parseFloat     SyntaxError\n\t\t\tDate                eval                  JSON       parseInt       TypeError\n\t\t\tdecodeURI           EvalError             Math       RangeError     undefined\n\t\t\tdecodeURIComponent  Function              NaN        ReferenceError URIError\n\n3. 可选的分号\n\n\t\t// 第一个分号可省略\n\t\ta = 3;\n\t\tb = 4;\n\n\t\t// 第一个分号不能省略\n\t\ta = 3; b = 4;\n* 以“（”、“[”、“/”、“+”或“-”开始，建议加上分号\n* 在return、break和continue后的表达式之间不能有换行\n\n## 二、类型、值和变量\n数据类型： 原始类型和对象类型\n原始类型： 数字、字符串、null、undefined\n### 1. 数字\n+ 整型直接量\n\t- 十进制，数字序列\n\t- 十六进制，以“0x”或“0X”为前缀，由0~9和a（A）~f（F）构成\n+ 浮点型直接量\n\t- 含小数点，有整数和小数部分\n\t- 指数记数，实数后跟e或E，再跟正负号，再加一个整型的指数， 如 6.02e23\n+ 算数运算，溢出、下溢或被零整除不报错\n\t- 溢出，值为Infinity（无穷大），或-Infinity（负无穷大）\n\t- 下溢，结果无限接近0，比js能表示的最小值还小。此时返回0或负零\n\t- 被零整除，返回Infinity或-Infinity。0/0 返回NaN\n\n\t\t\tInfinity                                       // 建一个可读/写的变量初始化为Infinity\n\t\t\tNumber.POSITIVE_INFINITY                       // 同样的值，只读\n\t\t\t1 / 0                                          // 同样的值\n\t\t\tNumber.MAX_VALUE + 1                           // Infinity\n\n\t\t\tNumber.NEGATIVE_INFINITY                       // 负无穷大\n\t\t\t-Infinity\n\t\t\t-1 / 0\n\t\t\t-Number.MAX_VALUE - 1\n\n\t\t\tNaN                                            //将一个可读/写的变量初始化为NaN\n\t\t\tNumber.NaN                                     // 同样的值，只读\n\t\t\t0 / 0                                          // NaN\n\n\t\t\tNumer.MIN_VALUE / 2                            // 发生下溢， 为0\n\t\t\t-Number.MIN_VALUE / 2                          // 负零\n\t\t\t-1 / Infiity                                   // 负零\n\t\t\t-0                     \n - NaN 和任何值都不等，包括本身。判断是否为NaN，使用 x != x，true则为NaN，反之亦然。isNaN（）函数\n - isFinite（），参数不为NaN，Infinity或-Infinity时为true\n+ 二进制浮点数和四舍五入错误\n二进制浮点数不能精确表示类似0.1这样简单的数字，计算结果也不精确\n\n### 2. 文本\n* 字符串直接量，即由单引号或双引号括起来的字符序列\n\t注： ECMAScript3中，字符串直接量必须写在一行中。\n\t\t\tECMAScript5中，可拆分为数行，每行必须Yi反斜线（\\）结束\n* 转义字符\n\n\t\t\\o                        //NULL字符\n\t\t\\b                        //退格符\n\t\t\\t                        //制表符\n\t\t\\n                        //换行符\n\t\t\\v                        //垂直制表符\n\t\t\\f                        //换页符\n\t\t\\r                        //回车符\n\t\t\\\"                        //双引号\n\t\t\\'                        // 单引号或撇号\n\t\t\\\\                        // 反斜线\n\n* 字符串的使用\n\t+ 字符串连接，+\n\t+ 字符串长度， length属性\n\n### 3.  布尔值，true和false\nundefined， null，0，-0，NaN，\"\"  ---> false\n所有其他值，包括所有对象（数组）---> true\n\n### 4.  null和undefined\n* null，描述“空值”，typeof null --> \"object\"\n* undefined，表示值的空缺，未定义，变量没有初始化。 typeof undefined --> \"undefined\"\nnull == undefined but  null !== undefined\n\n### 5. 不可变的原始值和可变的对象引用\n* 原始值是不可更改的：任何方法都无法更改一个原始值\n* 原始值的比较是值的比较\n* 对象的比较是引用的比较，如比较两个认读的对象或者数组\n\n\t\tfunction equalArrays(a, b){\n\t\t\tif(a.length != b.length ) return false;\n\t\t\tfor(var i = 0; i < a.length; i++)\n\t\t\t\tif(a[i] !== b[i]) return false;\n\t\t\treturn true;\n\t\t}\n\n### 6.类型转换\n| 值              | 转换为字符串 | 数字| 布尔值 | 对象|\n| -------------| ----------------: | :-----| :-------- | -----|\n| undefined    | “undefined” | NaN | false | throws TypeError |\n| null         | \"null\" | 0 | false | throws TypeError |\n| true | \"true\" | 1 | | new Boolean(true)|\n| false | \"false\" | 0 | | new Boolean(false)|\n| \"\"(空字符串) | | 0 | false | new String(\"\")|\n| \"1.2\"(非空，数字) |  | 1.2 | true |  new String(\"1.2\") |\n| \"one\"(非空，非数字) | | NaN | true | new String(\"one\") |\n| 0 | \"0\" | | false | new Number(0) |\n| -0 | \"0\" | | false |new Number(-0)|\n| NaN | \"NaN\" |  | false | new Number(NaN) |\n| Infinity | \"Infinity\" | | true | new Number(Infinity)|\n| -Infinity | \"-Infinity\" | | true | new Number(-Infinity)|\n| 1(无穷大，非零) | \"1\" | | true | new Number(1)|\n| {} (任意对象) | 参考6.3 | 参考6.3 | true| |\n| [] (任意数组) | \"\" | 0 | true| |\n| [9] (1个数字元素) | \"9\" | 9 | true | |\n| ['a'] (其他数组) | 使用join()方法| NaN | true | |\n| function(){} (任意函数)| 参考6.3 | NaN | true| |\n\n* 6.1. 转换和相等性 ，一个值转换为另一个值并不意味着两个值相等\n* 6.2\n\t+ 显示类型转换，最简单的方法是使用Boolean()、Number()、String()或Object()函数。注：除了null或undefined之外的任何值都具有toString（）方法\n\t+ 隐式类型转换，如使用一元\"+\"，一元\"!\"。 Number类定义的toString（）可接受表示转换基数的可选参数，parseInt（）第二个可选参数也为转换基数\n* 6.3 对象转换为原始值。\n  + 对象转换布尔值：所有的对象都转换为true\n  + 对象转换字符串和数字：\n 对象到字符串，先toString(),若没有该方法则valueOf（）。否则抛出类型错误异常。\n对象到数字，先valueOf(),若没有该方法则toString（），否则抛出类型错误异常。\n\t  - toString()，返回一个反映这个对象的字符串\n\t\t  * 数组类的toString()方法将每个数组元素转换为字符串，并在元素之间添加逗号后合并成结果字符串\n\t\t  * 函数类的toString()方法返回了这个函数的实现定义的表示方式，即该函数的JavaScript源代码字符串\n\t\t  * 日期类的toString()方法返回一个可读的日期和时间字符串\n\t\t  * RegExp类的toString()将其转换为表示正则表达式直接量的字符串\n\n\t\t\t\t\t [1, 2, 3].toString()  // \"1,2,3\"\n\t\t\t\t\t (function(x) { f(x); }).toString(); // \"function(x){\\n f(x); \\n}\"\n\t\t\t\t\t /\\d+/g.toString(); // \"/\\d+/g\"\n\t\t\t\t\t new Date(2010, 0, 1).toString(); // \"Mon Jun 19 2017 00:00:00 GMT+0800 (中国标准时间)\"\n\t  - valueOf()，返回对象本身，日期类返回1970.01.01以来的毫秒数\n\n\t\t\t\tvar now = new Date()\n\t\t\t\ttypeof(now + 1);  // \"string\", \"+\"将日期转换为字符串\n\t\t\t\ttypeof(now - 1); // \"number\"， “-”使用对象到数字的转换\n\t\t\t\tnow == now.toString(); // true， 隐式的和显示的字符串转换\n\t\t\t\tnow > (now - 1); // true， “>” 将日期转换为数字\n* 6.4 变量声明，使用关键字var来声明 ，一个var可声明多个变量，也可将变量的初始赋值和变量声明合写在一起。未赋值的初始值为undefined\n* 6.5 变量作用域，全局变量拥有全局作用域，函数体内的变量是局部变量，函数参数也是局部变量，作用域为该函数。在函数体内，局部变量的优先级高于同名的全局变量\n\t* 函数作用域和声明提前。函数朱用语是指在函数内声明的所有变量在函数体内始终是可见的。声明提前是指变量在声明之前可以使用，实际上是变量被提前至函数体的顶部或者全局顶部进行声明，当然值为undefined\n\n\t\t\tvar scope = 'global';\n\t\t\tfunction f(){\n\t\t\t\tconsole.log(scope); // undefined\n\t\t\t\tvar scope = 'local';\n\t\t\t\tconsole.log(scope); // local\n\t\t\t}\n\t* 作为属性的变量，使用var声明的变量不能通过delete删除。在非严格模式给一个未声明的变量赋值，可以删除\n\t* 作用域链，是一个对象列表或者链表。在js的最顶层代码中，作用域链由一个全局对象组成。在不包含嵌套的函数体内，作用域链上有两个对象，第一个是定义函数参数和局部变量的对象，第二个是全局对象。在一个嵌套的函数体内，作用域链上至少有三个对象.\n\n## 三、表达式和运算符\n### 1.原始表达式，包含常量或直接量、关键字和变量\n### 2.对象和数组的初始化表达式\n1. 数组初始化表达式，通过一对方括号和其内由逗号隔开的列表构成的。数组直接量中的列表逗号之间的元素可以省略，则空位填充值undefined。结尾处可以留下单个逗号\n2. 对象初始化表达式，也称“函数直接量”，\n3. 由一对花括号和其内由的表达式（包含一个属性名和一个冒号作为前缀）组成\n\n### 3.函数定义表达式\n包含关键字function，然后是一对圆括号，括号内是一个以逗号分割的列表，列表包含0个或多个标识符（参数），最后跟花括号包含的代码块\n\n\tvar square = function(x){\n     \treturn x*x\n\t}\n\n### 4.属性访问表达式\n\texpression.identifier\n\texpression[expression] //属性名称是一个保留字或者包含空格和标点符号或是一个数字，使用此方式\n\n### 5.调用表达式\n是一种调用（或者执行）函数或方法的语法表示\n\n### 6.对象创建表达式\n创建一个对象并调用一个函数（构造函数）初始化新对象的属性，多了一个关键字new\n\n\tnew Object();\n\tnew Point(2,3);\n\n### 7.运算符概述\n\n| 运算符      |     操作 |   A   |  N   | 类型 |\n| :-------- | --------:| --------:| --------:| :------: |\n| ++    |   前/后增量 |  R  | 1 | lval ---> num|\n| --    |   前/后减量 |  R  | 1 | lval ---> num|\n| -    |   求反 |  R  | 1 | num ---> num|\n| +    |  转换为数字|  R  | 1 | num ---> num|\n| ~    | 按位求反 |  R  | 1 | int ---> int |\n| !    |   逻辑非 |  R  | 1 | bool ---> bool|\n| delete    | 删除属性 |  R  | 1 | lval ---> bool|\n| typeof    |  检测操作数类型 |  R  | 1 | any ---> str|\n| void   |   返回undefined值 |  R  | 1 | any ---> undefined|\n| *、/、% | 乘、除、求余 | L | 2 | num,num ---> num |\n| +、- | 加、减 | L | 2 | num,num ---> num |\n| + | 字符串连接 | L | 2 | str,str ---> str|\n| << | 左移位 | L | 2 | int,int ---> int |\n| >> | 有符号右移 | L | 2 | int,int ---> int |\n| >>> | 无符号左移 | L | 2 | int,int ---> int |\n| <、<=、>、>= | 比较数字顺序 | L | 2 | num,num ---> bool |\n| <、<=、>、>= | 比较在字母表中的顺序 | L | 2 | str,str ---> bool |\n| instanceof | 测试对象类 | L | 2 | obj,func ---> bool |\n| in | 测试属性是否存在 | L | 2 | str,obj ---> bool |\n| == | 判断相等 | L | 2 | any,any ---> bool|\n| != | 判断不相等 | L | 2 | any,any ---> bool|\n| === | 判断恒等 | L | 2 | any,any ---> bool|\n| !== | 判断非恒等 | L | 2 | any,any ---> bool|\n| & | 按位与 | L | 2 | int,int ---> int |\n| ^ | 按位异或 | L | 2 | int,int ---> int |\n| &brvbar; | 按位或 | L | 2 | int,int ---> int |\n| && | 逻辑与 | L | 2 | any,any ---> any |\n| &brvbar;&brvbar; | 逻辑或 | L | 2 | any,any ---> any |\n| ?: | 条件运算符 | R | 3 | bool, any, any ---> any |\n| =  | 变量赋值或属性对象赋值  | R | 2 | lval, any ---> any |\n| *=, /=, %=, +=, -=, &=, ^=, &brvbar;=, <<=, >>=, >>>=  | 运算且赋值  | R | 2 | lval, any ---> any |\n| , | 忽略第一个操作数,返回第二个操作数 | L | 2 | any,any ---> any |\n\n注：属性访问表达式和调用表达式优先级高于表格所有运算，typeof优先级低于前者，高于后者\n\n### 8.算数表达式\n","source":"_posts/The Definitive Guide of javascript.md","raw":"---\ntitle: 《JavaScript权威指南》笔记\n---\n阅读《javascript权威指南》一书做的简要笔记，js基础非常重要，在学习新技术的同时也不忘夯实基础。该书是javascript程序员的必备参考……内容组织得很好，而且非常详细，值得阅读\n<!-- more -->\n\n@(我的笔记)\n\n## 一、词法结构\n### 1. 字符集\n*  区分大小写，关键字、变量、函数名和所有的标识符都必须采取一致的大小写形式。\n*  空格、换行符和格式控制符， js一般会忽略空格和换行符，Unicode格式控制符可用在注释、字符串直接量和正则表达式直接量中，不能用在标识符（如变量名）中\n*  Unicode转义序列，以\\u为前缀，用法同上\n### 2.注释\n\n    // 这里是单行注释\n    /*这里是一段注释*/ // 这里是另一段注释\n    /*\n     *这又是一段注释\n     *这里的注释可以连写多行\n     */\n\n### 3.直接量\n即程序中直接使用的数据值，如12,1.2，“hello world”等\n### 4.标识符和保留字\n1. 标识符\n+ 必须以字母、下划线（_）或美元符号（$）开始\n+ 数字不允许作为首字符\n\n2. 保留字\n\n\t\tbreak     delete    function    return    typeof\n\t\tcase      do        if          switch    var\n\t\tcatch     else      in          this      void\n\t\tcontinue  false     instanceof  throw     while\n\t\tdebugger  for       new         true      with\n\t\tdefault   finally   null        try\n\n\n- ECMAScript5 关键字\n\n\t\t\tclass  const  enum  export  extends  import  super\n\n- 严格模式下的保留字\n\n\t\t\timplements let private public  yield  interface  package  protected static\n\n- JavaScript预定义的全局变量和函数\n\n\t\t\targuments           encodeURI             Infinity   Number         RegExp\n\t\t\tArray               encodeURIComponent    isFinite   Object         String\n\t\t\tBoolean             Error                 isNaN      parseFloat     SyntaxError\n\t\t\tDate                eval                  JSON       parseInt       TypeError\n\t\t\tdecodeURI           EvalError             Math       RangeError     undefined\n\t\t\tdecodeURIComponent  Function              NaN        ReferenceError URIError\n\n3. 可选的分号\n\n\t\t// 第一个分号可省略\n\t\ta = 3;\n\t\tb = 4;\n\n\t\t// 第一个分号不能省略\n\t\ta = 3; b = 4;\n* 以“（”、“[”、“/”、“+”或“-”开始，建议加上分号\n* 在return、break和continue后的表达式之间不能有换行\n\n## 二、类型、值和变量\n数据类型： 原始类型和对象类型\n原始类型： 数字、字符串、null、undefined\n### 1. 数字\n+ 整型直接量\n\t- 十进制，数字序列\n\t- 十六进制，以“0x”或“0X”为前缀，由0~9和a（A）~f（F）构成\n+ 浮点型直接量\n\t- 含小数点，有整数和小数部分\n\t- 指数记数，实数后跟e或E，再跟正负号，再加一个整型的指数， 如 6.02e23\n+ 算数运算，溢出、下溢或被零整除不报错\n\t- 溢出，值为Infinity（无穷大），或-Infinity（负无穷大）\n\t- 下溢，结果无限接近0，比js能表示的最小值还小。此时返回0或负零\n\t- 被零整除，返回Infinity或-Infinity。0/0 返回NaN\n\n\t\t\tInfinity                                       // 建一个可读/写的变量初始化为Infinity\n\t\t\tNumber.POSITIVE_INFINITY                       // 同样的值，只读\n\t\t\t1 / 0                                          // 同样的值\n\t\t\tNumber.MAX_VALUE + 1                           // Infinity\n\n\t\t\tNumber.NEGATIVE_INFINITY                       // 负无穷大\n\t\t\t-Infinity\n\t\t\t-1 / 0\n\t\t\t-Number.MAX_VALUE - 1\n\n\t\t\tNaN                                            //将一个可读/写的变量初始化为NaN\n\t\t\tNumber.NaN                                     // 同样的值，只读\n\t\t\t0 / 0                                          // NaN\n\n\t\t\tNumer.MIN_VALUE / 2                            // 发生下溢， 为0\n\t\t\t-Number.MIN_VALUE / 2                          // 负零\n\t\t\t-1 / Infiity                                   // 负零\n\t\t\t-0                     \n - NaN 和任何值都不等，包括本身。判断是否为NaN，使用 x != x，true则为NaN，反之亦然。isNaN（）函数\n - isFinite（），参数不为NaN，Infinity或-Infinity时为true\n+ 二进制浮点数和四舍五入错误\n二进制浮点数不能精确表示类似0.1这样简单的数字，计算结果也不精确\n\n### 2. 文本\n* 字符串直接量，即由单引号或双引号括起来的字符序列\n\t注： ECMAScript3中，字符串直接量必须写在一行中。\n\t\t\tECMAScript5中，可拆分为数行，每行必须Yi反斜线（\\）结束\n* 转义字符\n\n\t\t\\o                        //NULL字符\n\t\t\\b                        //退格符\n\t\t\\t                        //制表符\n\t\t\\n                        //换行符\n\t\t\\v                        //垂直制表符\n\t\t\\f                        //换页符\n\t\t\\r                        //回车符\n\t\t\\\"                        //双引号\n\t\t\\'                        // 单引号或撇号\n\t\t\\\\                        // 反斜线\n\n* 字符串的使用\n\t+ 字符串连接，+\n\t+ 字符串长度， length属性\n\n### 3.  布尔值，true和false\nundefined， null，0，-0，NaN，\"\"  ---> false\n所有其他值，包括所有对象（数组）---> true\n\n### 4.  null和undefined\n* null，描述“空值”，typeof null --> \"object\"\n* undefined，表示值的空缺，未定义，变量没有初始化。 typeof undefined --> \"undefined\"\nnull == undefined but  null !== undefined\n\n### 5. 不可变的原始值和可变的对象引用\n* 原始值是不可更改的：任何方法都无法更改一个原始值\n* 原始值的比较是值的比较\n* 对象的比较是引用的比较，如比较两个认读的对象或者数组\n\n\t\tfunction equalArrays(a, b){\n\t\t\tif(a.length != b.length ) return false;\n\t\t\tfor(var i = 0; i < a.length; i++)\n\t\t\t\tif(a[i] !== b[i]) return false;\n\t\t\treturn true;\n\t\t}\n\n### 6.类型转换\n| 值              | 转换为字符串 | 数字| 布尔值 | 对象|\n| -------------| ----------------: | :-----| :-------- | -----|\n| undefined    | “undefined” | NaN | false | throws TypeError |\n| null         | \"null\" | 0 | false | throws TypeError |\n| true | \"true\" | 1 | | new Boolean(true)|\n| false | \"false\" | 0 | | new Boolean(false)|\n| \"\"(空字符串) | | 0 | false | new String(\"\")|\n| \"1.2\"(非空，数字) |  | 1.2 | true |  new String(\"1.2\") |\n| \"one\"(非空，非数字) | | NaN | true | new String(\"one\") |\n| 0 | \"0\" | | false | new Number(0) |\n| -0 | \"0\" | | false |new Number(-0)|\n| NaN | \"NaN\" |  | false | new Number(NaN) |\n| Infinity | \"Infinity\" | | true | new Number(Infinity)|\n| -Infinity | \"-Infinity\" | | true | new Number(-Infinity)|\n| 1(无穷大，非零) | \"1\" | | true | new Number(1)|\n| {} (任意对象) | 参考6.3 | 参考6.3 | true| |\n| [] (任意数组) | \"\" | 0 | true| |\n| [9] (1个数字元素) | \"9\" | 9 | true | |\n| ['a'] (其他数组) | 使用join()方法| NaN | true | |\n| function(){} (任意函数)| 参考6.3 | NaN | true| |\n\n* 6.1. 转换和相等性 ，一个值转换为另一个值并不意味着两个值相等\n* 6.2\n\t+ 显示类型转换，最简单的方法是使用Boolean()、Number()、String()或Object()函数。注：除了null或undefined之外的任何值都具有toString（）方法\n\t+ 隐式类型转换，如使用一元\"+\"，一元\"!\"。 Number类定义的toString（）可接受表示转换基数的可选参数，parseInt（）第二个可选参数也为转换基数\n* 6.3 对象转换为原始值。\n  + 对象转换布尔值：所有的对象都转换为true\n  + 对象转换字符串和数字：\n 对象到字符串，先toString(),若没有该方法则valueOf（）。否则抛出类型错误异常。\n对象到数字，先valueOf(),若没有该方法则toString（），否则抛出类型错误异常。\n\t  - toString()，返回一个反映这个对象的字符串\n\t\t  * 数组类的toString()方法将每个数组元素转换为字符串，并在元素之间添加逗号后合并成结果字符串\n\t\t  * 函数类的toString()方法返回了这个函数的实现定义的表示方式，即该函数的JavaScript源代码字符串\n\t\t  * 日期类的toString()方法返回一个可读的日期和时间字符串\n\t\t  * RegExp类的toString()将其转换为表示正则表达式直接量的字符串\n\n\t\t\t\t\t [1, 2, 3].toString()  // \"1,2,3\"\n\t\t\t\t\t (function(x) { f(x); }).toString(); // \"function(x){\\n f(x); \\n}\"\n\t\t\t\t\t /\\d+/g.toString(); // \"/\\d+/g\"\n\t\t\t\t\t new Date(2010, 0, 1).toString(); // \"Mon Jun 19 2017 00:00:00 GMT+0800 (中国标准时间)\"\n\t  - valueOf()，返回对象本身，日期类返回1970.01.01以来的毫秒数\n\n\t\t\t\tvar now = new Date()\n\t\t\t\ttypeof(now + 1);  // \"string\", \"+\"将日期转换为字符串\n\t\t\t\ttypeof(now - 1); // \"number\"， “-”使用对象到数字的转换\n\t\t\t\tnow == now.toString(); // true， 隐式的和显示的字符串转换\n\t\t\t\tnow > (now - 1); // true， “>” 将日期转换为数字\n* 6.4 变量声明，使用关键字var来声明 ，一个var可声明多个变量，也可将变量的初始赋值和变量声明合写在一起。未赋值的初始值为undefined\n* 6.5 变量作用域，全局变量拥有全局作用域，函数体内的变量是局部变量，函数参数也是局部变量，作用域为该函数。在函数体内，局部变量的优先级高于同名的全局变量\n\t* 函数作用域和声明提前。函数朱用语是指在函数内声明的所有变量在函数体内始终是可见的。声明提前是指变量在声明之前可以使用，实际上是变量被提前至函数体的顶部或者全局顶部进行声明，当然值为undefined\n\n\t\t\tvar scope = 'global';\n\t\t\tfunction f(){\n\t\t\t\tconsole.log(scope); // undefined\n\t\t\t\tvar scope = 'local';\n\t\t\t\tconsole.log(scope); // local\n\t\t\t}\n\t* 作为属性的变量，使用var声明的变量不能通过delete删除。在非严格模式给一个未声明的变量赋值，可以删除\n\t* 作用域链，是一个对象列表或者链表。在js的最顶层代码中，作用域链由一个全局对象组成。在不包含嵌套的函数体内，作用域链上有两个对象，第一个是定义函数参数和局部变量的对象，第二个是全局对象。在一个嵌套的函数体内，作用域链上至少有三个对象.\n\n## 三、表达式和运算符\n### 1.原始表达式，包含常量或直接量、关键字和变量\n### 2.对象和数组的初始化表达式\n1. 数组初始化表达式，通过一对方括号和其内由逗号隔开的列表构成的。数组直接量中的列表逗号之间的元素可以省略，则空位填充值undefined。结尾处可以留下单个逗号\n2. 对象初始化表达式，也称“函数直接量”，\n3. 由一对花括号和其内由的表达式（包含一个属性名和一个冒号作为前缀）组成\n\n### 3.函数定义表达式\n包含关键字function，然后是一对圆括号，括号内是一个以逗号分割的列表，列表包含0个或多个标识符（参数），最后跟花括号包含的代码块\n\n\tvar square = function(x){\n     \treturn x*x\n\t}\n\n### 4.属性访问表达式\n\texpression.identifier\n\texpression[expression] //属性名称是一个保留字或者包含空格和标点符号或是一个数字，使用此方式\n\n### 5.调用表达式\n是一种调用（或者执行）函数或方法的语法表示\n\n### 6.对象创建表达式\n创建一个对象并调用一个函数（构造函数）初始化新对象的属性，多了一个关键字new\n\n\tnew Object();\n\tnew Point(2,3);\n\n### 7.运算符概述\n\n| 运算符      |     操作 |   A   |  N   | 类型 |\n| :-------- | --------:| --------:| --------:| :------: |\n| ++    |   前/后增量 |  R  | 1 | lval ---> num|\n| --    |   前/后减量 |  R  | 1 | lval ---> num|\n| -    |   求反 |  R  | 1 | num ---> num|\n| +    |  转换为数字|  R  | 1 | num ---> num|\n| ~    | 按位求反 |  R  | 1 | int ---> int |\n| !    |   逻辑非 |  R  | 1 | bool ---> bool|\n| delete    | 删除属性 |  R  | 1 | lval ---> bool|\n| typeof    |  检测操作数类型 |  R  | 1 | any ---> str|\n| void   |   返回undefined值 |  R  | 1 | any ---> undefined|\n| *、/、% | 乘、除、求余 | L | 2 | num,num ---> num |\n| +、- | 加、减 | L | 2 | num,num ---> num |\n| + | 字符串连接 | L | 2 | str,str ---> str|\n| << | 左移位 | L | 2 | int,int ---> int |\n| >> | 有符号右移 | L | 2 | int,int ---> int |\n| >>> | 无符号左移 | L | 2 | int,int ---> int |\n| <、<=、>、>= | 比较数字顺序 | L | 2 | num,num ---> bool |\n| <、<=、>、>= | 比较在字母表中的顺序 | L | 2 | str,str ---> bool |\n| instanceof | 测试对象类 | L | 2 | obj,func ---> bool |\n| in | 测试属性是否存在 | L | 2 | str,obj ---> bool |\n| == | 判断相等 | L | 2 | any,any ---> bool|\n| != | 判断不相等 | L | 2 | any,any ---> bool|\n| === | 判断恒等 | L | 2 | any,any ---> bool|\n| !== | 判断非恒等 | L | 2 | any,any ---> bool|\n| & | 按位与 | L | 2 | int,int ---> int |\n| ^ | 按位异或 | L | 2 | int,int ---> int |\n| &brvbar; | 按位或 | L | 2 | int,int ---> int |\n| && | 逻辑与 | L | 2 | any,any ---> any |\n| &brvbar;&brvbar; | 逻辑或 | L | 2 | any,any ---> any |\n| ?: | 条件运算符 | R | 3 | bool, any, any ---> any |\n| =  | 变量赋值或属性对象赋值  | R | 2 | lval, any ---> any |\n| *=, /=, %=, +=, -=, &=, ^=, &brvbar;=, <<=, >>=, >>>=  | 运算且赋值  | R | 2 | lval, any ---> any |\n| , | 忽略第一个操作数,返回第二个操作数 | L | 2 | any,any ---> any |\n\n注：属性访问表达式和调用表达式优先级高于表格所有运算，typeof优先级低于前者，高于后者\n\n### 8.算数表达式\n","slug":"The Definitive Guide of javascript","published":1,"date":"2017-05-26T07:12:36.606Z","updated":"2017-05-26T02:33:36.469Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj35px5n30000x8deyi8h0b3f","content":"<p>阅读《javascript权威指南》一书做的简要笔记，js基础非常重要，在学习新技术的同时也不忘夯实基础。该书是javascript程序员的必备参考……内容组织得很好，而且非常详细，值得阅读<br><a id=\"more\"></a></p>\n<p>@(我的笔记)</p>\n<h2 id=\"一、词法结构\"><a href=\"#一、词法结构\" class=\"headerlink\" title=\"一、词法结构\"></a>一、词法结构</h2><h3 id=\"1-字符集\"><a href=\"#1-字符集\" class=\"headerlink\" title=\"1. 字符集\"></a>1. 字符集</h3><ul>\n<li>区分大小写，关键字、变量、函数名和所有的标识符都必须采取一致的大小写形式。</li>\n<li>空格、换行符和格式控制符， js一般会忽略空格和换行符，Unicode格式控制符可用在注释、字符串直接量和正则表达式直接量中，不能用在标识符（如变量名）中</li>\n<li><p>Unicode转义序列，以\\u为前缀，用法同上</p>\n<h3 id=\"2-注释\"><a href=\"#2-注释\" class=\"headerlink\" title=\"2.注释\"></a>2.注释</h3><p> // 这里是单行注释<br> /<em>这里是一段注释</em>/ // 这里是另一段注释<br> /<em>\n  </em>这又是一段注释<br>  <em>这里的注释可以连写多行\n  </em>/</p>\n</li>\n</ul>\n<h3 id=\"3-直接量\"><a href=\"#3-直接量\" class=\"headerlink\" title=\"3.直接量\"></a>3.直接量</h3><p>即程序中直接使用的数据值，如12,1.2，“hello world”等</p>\n<h3 id=\"4-标识符和保留字\"><a href=\"#4-标识符和保留字\" class=\"headerlink\" title=\"4.标识符和保留字\"></a>4.标识符和保留字</h3><ol>\n<li>标识符</li>\n</ol>\n<ul>\n<li>必须以字母、下划线（_）或美元符号（$）开始</li>\n<li>数字不允许作为首字符</li>\n</ul>\n<ol>\n<li><p>保留字</p>\n<pre><code>break     delete    function    return    typeof\ncase      do        if          switch    var\ncatch     else      in          this      void\ncontinue  false     instanceof  throw     while\ndebugger  for       new         true      with\ndefault   finally   null        try\n</code></pre></li>\n</ol>\n<ul>\n<li><p>ECMAScript5 关键字</p>\n<pre><code>class  const  enum  export  extends  import  super\n</code></pre></li>\n<li><p>严格模式下的保留字</p>\n<pre><code>implements let private public  yield  interface  package  protected static\n</code></pre></li>\n<li><p>JavaScript预定义的全局变量和函数</p>\n<pre><code>arguments           encodeURI             Infinity   Number         RegExp\nArray               encodeURIComponent    isFinite   Object         String\nBoolean             Error                 isNaN      parseFloat     SyntaxError\nDate                eval                  JSON       parseInt       TypeError\ndecodeURI           EvalError             Math       RangeError     undefined\ndecodeURIComponent  Function              NaN        ReferenceError URIError\n</code></pre></li>\n</ul>\n<ol>\n<li><p>可选的分号</p>\n<pre><code>// 第一个分号可省略\na = 3;\nb = 4;\n\n// 第一个分号不能省略\na = 3; b = 4;\n</code></pre></li>\n</ol>\n<ul>\n<li>以“（”、“[”、“/”、“+”或“-”开始，建议加上分号</li>\n<li>在return、break和continue后的表达式之间不能有换行</li>\n</ul>\n<h2 id=\"二、类型、值和变量\"><a href=\"#二、类型、值和变量\" class=\"headerlink\" title=\"二、类型、值和变量\"></a>二、类型、值和变量</h2><p>数据类型： 原始类型和对象类型<br>原始类型： 数字、字符串、null、undefined</p>\n<h3 id=\"1-数字\"><a href=\"#1-数字\" class=\"headerlink\" title=\"1. 数字\"></a>1. 数字</h3><ul>\n<li>整型直接量<ul>\n<li>十进制，数字序列</li>\n<li>十六进制，以“0x”或“0X”为前缀，由0~9和a（A）~f（F）构成</li>\n</ul>\n</li>\n<li>浮点型直接量<ul>\n<li>含小数点，有整数和小数部分</li>\n<li>指数记数，实数后跟e或E，再跟正负号，再加一个整型的指数， 如 6.02e23</li>\n</ul>\n</li>\n<li><p>算数运算，溢出、下溢或被零整除不报错</p>\n<ul>\n<li>溢出，值为Infinity（无穷大），或-Infinity（负无穷大）</li>\n<li>下溢，结果无限接近0，比js能表示的最小值还小。此时返回0或负零</li>\n<li><p>被零整除，返回Infinity或-Infinity。0/0 返回NaN</p>\n<pre><code>Infinity                                       // 建一个可读/写的变量初始化为Infinity\nNumber.POSITIVE_INFINITY                       // 同样的值，只读\n1 / 0                                          // 同样的值\nNumber.MAX_VALUE + 1                           // Infinity\n\nNumber.NEGATIVE_INFINITY                       // 负无穷大\n-Infinity\n-1 / 0\n-Number.MAX_VALUE - 1\n\nNaN                                            //将一个可读/写的变量初始化为NaN\nNumber.NaN                                     // 同样的值，只读\n0 / 0                                          // NaN\n\nNumer.MIN_VALUE / 2                            // 发生下溢， 为0\n-Number.MIN_VALUE / 2                          // 负零\n-1 / Infiity                                   // 负零\n-0                     \n</code></pre><ul>\n<li>NaN 和任何值都不等，包括本身。判断是否为NaN，使用 x != x，true则为NaN，反之亦然。isNaN（）函数</li>\n<li>isFinite（），参数不为NaN，Infinity或-Infinity时为true</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>二进制浮点数和四舍五入错误<br>二进制浮点数不能精确表示类似0.1这样简单的数字，计算结果也不精确</li>\n</ul>\n<h3 id=\"2-文本\"><a href=\"#2-文本\" class=\"headerlink\" title=\"2. 文本\"></a>2. 文本</h3><ul>\n<li>字符串直接量，即由单引号或双引号括起来的字符序列<br>  注： ECMAScript3中，字符串直接量必须写在一行中。<pre><code>ECMAScript5中，可拆分为数行，每行必须Yi反斜线（\\）结束\n</code></pre></li>\n<li><p>转义字符</p>\n<pre><code>\\o                        //NULL字符\n\\b                        //退格符\n\\t                        //制表符\n\\n                        //换行符\n\\v                        //垂直制表符\n\\f                        //换页符\n\\r                        //回车符\n\\&quot;                        //双引号\n\\&apos;                        // 单引号或撇号\n\\\\                        // 反斜线\n</code></pre></li>\n<li><p>字符串的使用</p>\n<ul>\n<li>字符串连接，+</li>\n<li>字符串长度， length属性</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-布尔值，true和false\"><a href=\"#3-布尔值，true和false\" class=\"headerlink\" title=\"3.  布尔值，true和false\"></a>3.  布尔值，true和false</h3><p>undefined， null，0，-0，NaN，””  —&gt; false<br>所有其他值，包括所有对象（数组）—&gt; true</p>\n<h3 id=\"4-null和undefined\"><a href=\"#4-null和undefined\" class=\"headerlink\" title=\"4.  null和undefined\"></a>4.  null和undefined</h3><ul>\n<li>null，描述“空值”，typeof null –&gt; “object”</li>\n<li>undefined，表示值的空缺，未定义，变量没有初始化。 typeof undefined –&gt; “undefined”<br>null == undefined but  null !== undefined</li>\n</ul>\n<h3 id=\"5-不可变的原始值和可变的对象引用\"><a href=\"#5-不可变的原始值和可变的对象引用\" class=\"headerlink\" title=\"5. 不可变的原始值和可变的对象引用\"></a>5. 不可变的原始值和可变的对象引用</h3><ul>\n<li>原始值是不可更改的：任何方法都无法更改一个原始值</li>\n<li>原始值的比较是值的比较</li>\n<li><p>对象的比较是引用的比较，如比较两个认读的对象或者数组</p>\n<pre><code>function equalArrays(a, b){\n    if(a.length != b.length ) return false;\n    for(var i = 0; i &lt; a.length; i++)\n        if(a[i] !== b[i]) return false;\n    return true;\n}\n</code></pre></li>\n</ul>\n<h3 id=\"6-类型转换\"><a href=\"#6-类型转换\" class=\"headerlink\" title=\"6.类型转换\"></a>6.类型转换</h3><table>\n<thead>\n<tr>\n<th>值</th>\n<th style=\"text-align:right\">转换为字符串</th>\n<th style=\"text-align:left\">数字</th>\n<th style=\"text-align:left\">布尔值</th>\n<th>对象</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>undefined</td>\n<td style=\"text-align:right\">“undefined”</td>\n<td style=\"text-align:left\">NaN</td>\n<td style=\"text-align:left\">false</td>\n<td>throws TypeError</td>\n</tr>\n<tr>\n<td>null</td>\n<td style=\"text-align:right\">“null”</td>\n<td style=\"text-align:left\">0</td>\n<td style=\"text-align:left\">false</td>\n<td>throws TypeError</td>\n</tr>\n<tr>\n<td>true</td>\n<td style=\"text-align:right\">“true”</td>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\"></td>\n<td>new Boolean(true)</td>\n</tr>\n<tr>\n<td>false</td>\n<td style=\"text-align:right\">“false”</td>\n<td style=\"text-align:left\">0</td>\n<td style=\"text-align:left\"></td>\n<td>new Boolean(false)</td>\n</tr>\n<tr>\n<td>“”(空字符串)</td>\n<td style=\"text-align:right\"></td>\n<td style=\"text-align:left\">0</td>\n<td style=\"text-align:left\">false</td>\n<td>new String(“”)</td>\n</tr>\n<tr>\n<td>“1.2”(非空，数字)</td>\n<td style=\"text-align:right\"></td>\n<td style=\"text-align:left\">1.2</td>\n<td style=\"text-align:left\">true</td>\n<td>new String(“1.2”)</td>\n</tr>\n<tr>\n<td>“one”(非空，非数字)</td>\n<td style=\"text-align:right\"></td>\n<td style=\"text-align:left\">NaN</td>\n<td style=\"text-align:left\">true</td>\n<td>new String(“one”)</td>\n</tr>\n<tr>\n<td>0</td>\n<td style=\"text-align:right\">“0”</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">false</td>\n<td>new Number(0)</td>\n</tr>\n<tr>\n<td>-0</td>\n<td style=\"text-align:right\">“0”</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">false</td>\n<td>new Number(-0)</td>\n</tr>\n<tr>\n<td>NaN</td>\n<td style=\"text-align:right\">“NaN”</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">false</td>\n<td>new Number(NaN)</td>\n</tr>\n<tr>\n<td>Infinity</td>\n<td style=\"text-align:right\">“Infinity”</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">true</td>\n<td>new Number(Infinity)</td>\n</tr>\n<tr>\n<td>-Infinity</td>\n<td style=\"text-align:right\">“-Infinity”</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">true</td>\n<td>new Number(-Infinity)</td>\n</tr>\n<tr>\n<td>1(无穷大，非零)</td>\n<td style=\"text-align:right\">“1”</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">true</td>\n<td>new Number(1)</td>\n</tr>\n<tr>\n<td>{} (任意对象)</td>\n<td style=\"text-align:right\">参考6.3</td>\n<td style=\"text-align:left\">参考6.3</td>\n<td style=\"text-align:left\">true</td>\n<td></td>\n</tr>\n<tr>\n<td>[] (任意数组)</td>\n<td style=\"text-align:right\">“”</td>\n<td style=\"text-align:left\">0</td>\n<td style=\"text-align:left\">true</td>\n<td></td>\n</tr>\n<tr>\n<td>[9] (1个数字元素)</td>\n<td style=\"text-align:right\">“9”</td>\n<td style=\"text-align:left\">9</td>\n<td style=\"text-align:left\">true</td>\n<td></td>\n</tr>\n<tr>\n<td>[‘a’] (其他数组)</td>\n<td style=\"text-align:right\">使用join()方法</td>\n<td style=\"text-align:left\">NaN</td>\n<td style=\"text-align:left\">true</td>\n<td></td>\n</tr>\n<tr>\n<td>function(){} (任意函数)</td>\n<td style=\"text-align:right\">参考6.3</td>\n<td style=\"text-align:left\">NaN</td>\n<td style=\"text-align:left\">true</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>6.1. 转换和相等性 ，一个值转换为另一个值并不意味着两个值相等</li>\n<li>6.2<ul>\n<li>显示类型转换，最简单的方法是使用Boolean()、Number()、String()或Object()函数。注：除了null或undefined之外的任何值都具有toString（）方法</li>\n<li>隐式类型转换，如使用一元”+”，一元”!”。 Number类定义的toString（）可接受表示转换基数的可选参数，parseInt（）第二个可选参数也为转换基数</li>\n</ul>\n</li>\n<li><p>6.3 对象转换为原始值。</p>\n<ul>\n<li>对象转换布尔值：所有的对象都转换为true</li>\n<li><p>对象转换字符串和数字：<br>对象到字符串，先toString(),若没有该方法则valueOf（）。否则抛出类型错误异常。<br>对象到数字，先valueOf(),若没有该方法则toString（），否则抛出类型错误异常。</p>\n<ul>\n<li><p>toString()，返回一个反映这个对象的字符串</p>\n<ul>\n<li>数组类的toString()方法将每个数组元素转换为字符串，并在元素之间添加逗号后合并成结果字符串</li>\n<li>函数类的toString()方法返回了这个函数的实现定义的表示方式，即该函数的JavaScript源代码字符串</li>\n<li>日期类的toString()方法返回一个可读的日期和时间字符串</li>\n<li><p>RegExp类的toString()将其转换为表示正则表达式直接量的字符串</p>\n<pre><code>[1, 2, 3].toString()  // &quot;1,2,3&quot;\n(function(x) { f(x); }).toString(); // &quot;function(x){\\n f(x); \\n}&quot;\n/\\d+/g.toString(); // &quot;/\\d+/g&quot;\nnew Date(2010, 0, 1).toString(); // &quot;Mon Jun 19 2017 00:00:00 GMT+0800 (中国标准时间)&quot;\n</code></pre></li>\n</ul>\n</li>\n<li><p>valueOf()，返回对象本身，日期类返回1970.01.01以来的毫秒数</p>\n<pre><code>var now = new Date()\ntypeof(now + 1);  // &quot;string&quot;, &quot;+&quot;将日期转换为字符串\ntypeof(now - 1); // &quot;number&quot;， “-”使用对象到数字的转换\nnow == now.toString(); // true， 隐式的和显示的字符串转换\nnow &gt; (now - 1); // true， “&gt;” 将日期转换为数字\n</code></pre></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>6.4 变量声明，使用关键字var来声明 ，一个var可声明多个变量，也可将变量的初始赋值和变量声明合写在一起。未赋值的初始值为undefined</li>\n<li><p>6.5 变量作用域，全局变量拥有全局作用域，函数体内的变量是局部变量，函数参数也是局部变量，作用域为该函数。在函数体内，局部变量的优先级高于同名的全局变量</p>\n<ul>\n<li><p>函数作用域和声明提前。函数朱用语是指在函数内声明的所有变量在函数体内始终是可见的。声明提前是指变量在声明之前可以使用，实际上是变量被提前至函数体的顶部或者全局顶部进行声明，当然值为undefined</p>\n<pre><code>var scope = &apos;global&apos;;\nfunction f(){\n    console.log(scope); // undefined\n    var scope = &apos;local&apos;;\n    console.log(scope); // local\n}\n</code></pre></li>\n<li>作为属性的变量，使用var声明的变量不能通过delete删除。在非严格模式给一个未声明的变量赋值，可以删除</li>\n<li>作用域链，是一个对象列表或者链表。在js的最顶层代码中，作用域链由一个全局对象组成。在不包含嵌套的函数体内，作用域链上有两个对象，第一个是定义函数参数和局部变量的对象，第二个是全局对象。在一个嵌套的函数体内，作用域链上至少有三个对象.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"三、表达式和运算符\"><a href=\"#三、表达式和运算符\" class=\"headerlink\" title=\"三、表达式和运算符\"></a>三、表达式和运算符</h2><h3 id=\"1-原始表达式，包含常量或直接量、关键字和变量\"><a href=\"#1-原始表达式，包含常量或直接量、关键字和变量\" class=\"headerlink\" title=\"1.原始表达式，包含常量或直接量、关键字和变量\"></a>1.原始表达式，包含常量或直接量、关键字和变量</h3><h3 id=\"2-对象和数组的初始化表达式\"><a href=\"#2-对象和数组的初始化表达式\" class=\"headerlink\" title=\"2.对象和数组的初始化表达式\"></a>2.对象和数组的初始化表达式</h3><ol>\n<li>数组初始化表达式，通过一对方括号和其内由逗号隔开的列表构成的。数组直接量中的列表逗号之间的元素可以省略，则空位填充值undefined。结尾处可以留下单个逗号</li>\n<li>对象初始化表达式，也称“函数直接量”，</li>\n<li>由一对花括号和其内由的表达式（包含一个属性名和一个冒号作为前缀）组成</li>\n</ol>\n<h3 id=\"3-函数定义表达式\"><a href=\"#3-函数定义表达式\" class=\"headerlink\" title=\"3.函数定义表达式\"></a>3.函数定义表达式</h3><p>包含关键字function，然后是一对圆括号，括号内是一个以逗号分割的列表，列表包含0个或多个标识符（参数），最后跟花括号包含的代码块</p>\n<pre><code>var square = function(x){\n     return x*x\n}\n</code></pre><h3 id=\"4-属性访问表达式\"><a href=\"#4-属性访问表达式\" class=\"headerlink\" title=\"4.属性访问表达式\"></a>4.属性访问表达式</h3><pre><code>expression.identifier\nexpression[expression] //属性名称是一个保留字或者包含空格和标点符号或是一个数字，使用此方式\n</code></pre><h3 id=\"5-调用表达式\"><a href=\"#5-调用表达式\" class=\"headerlink\" title=\"5.调用表达式\"></a>5.调用表达式</h3><p>是一种调用（或者执行）函数或方法的语法表示</p>\n<h3 id=\"6-对象创建表达式\"><a href=\"#6-对象创建表达式\" class=\"headerlink\" title=\"6.对象创建表达式\"></a>6.对象创建表达式</h3><p>创建一个对象并调用一个函数（构造函数）初始化新对象的属性，多了一个关键字new</p>\n<pre><code>new Object();\nnew Point(2,3);\n</code></pre><h3 id=\"7-运算符概述\"><a href=\"#7-运算符概述\" class=\"headerlink\" title=\"7.运算符概述\"></a>7.运算符概述</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">运算符</th>\n<th style=\"text-align:right\">操作</th>\n<th style=\"text-align:right\">A</th>\n<th style=\"text-align:right\">N</th>\n<th style=\"text-align:center\">类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">++</td>\n<td style=\"text-align:right\">前/后增量</td>\n<td style=\"text-align:right\">R</td>\n<td style=\"text-align:right\">1</td>\n<td style=\"text-align:center\">lval —&gt; num</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">–</td>\n<td style=\"text-align:right\">前/后减量</td>\n<td style=\"text-align:right\">R</td>\n<td style=\"text-align:right\">1</td>\n<td style=\"text-align:center\">lval —&gt; num</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-</td>\n<td style=\"text-align:right\">求反</td>\n<td style=\"text-align:right\">R</td>\n<td style=\"text-align:right\">1</td>\n<td style=\"text-align:center\">num —&gt; num</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">+</td>\n<td style=\"text-align:right\">转换为数字</td>\n<td style=\"text-align:right\">R</td>\n<td style=\"text-align:right\">1</td>\n<td style=\"text-align:center\">num —&gt; num</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">~</td>\n<td style=\"text-align:right\">按位求反</td>\n<td style=\"text-align:right\">R</td>\n<td style=\"text-align:right\">1</td>\n<td style=\"text-align:center\">int —&gt; int</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">!</td>\n<td style=\"text-align:right\">逻辑非</td>\n<td style=\"text-align:right\">R</td>\n<td style=\"text-align:right\">1</td>\n<td style=\"text-align:center\">bool —&gt; bool</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">delete</td>\n<td style=\"text-align:right\">删除属性</td>\n<td style=\"text-align:right\">R</td>\n<td style=\"text-align:right\">1</td>\n<td style=\"text-align:center\">lval —&gt; bool</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">typeof</td>\n<td style=\"text-align:right\">检测操作数类型</td>\n<td style=\"text-align:right\">R</td>\n<td style=\"text-align:right\">1</td>\n<td style=\"text-align:center\">any —&gt; str</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">void</td>\n<td style=\"text-align:right\">返回undefined值</td>\n<td style=\"text-align:right\">R</td>\n<td style=\"text-align:right\">1</td>\n<td style=\"text-align:center\">any —&gt; undefined</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">*、/、%</td>\n<td style=\"text-align:right\">乘、除、求余</td>\n<td style=\"text-align:right\">L</td>\n<td style=\"text-align:right\">2</td>\n<td style=\"text-align:center\">num,num —&gt; num</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">+、-</td>\n<td style=\"text-align:right\">加、减</td>\n<td style=\"text-align:right\">L</td>\n<td style=\"text-align:right\">2</td>\n<td style=\"text-align:center\">num,num —&gt; num</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">+</td>\n<td style=\"text-align:right\">字符串连接</td>\n<td style=\"text-align:right\">L</td>\n<td style=\"text-align:right\">2</td>\n<td style=\"text-align:center\">str,str —&gt; str</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;&lt;</td>\n<td style=\"text-align:right\">左移位</td>\n<td style=\"text-align:right\">L</td>\n<td style=\"text-align:right\">2</td>\n<td style=\"text-align:center\">int,int —&gt; int</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&gt;&gt;</td>\n<td style=\"text-align:right\">有符号右移</td>\n<td style=\"text-align:right\">L</td>\n<td style=\"text-align:right\">2</td>\n<td style=\"text-align:center\">int,int —&gt; int</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&gt;&gt;&gt;</td>\n<td style=\"text-align:right\">无符号左移</td>\n<td style=\"text-align:right\">L</td>\n<td style=\"text-align:right\">2</td>\n<td style=\"text-align:center\">int,int —&gt; int</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;、&lt;=、&gt;、&gt;=</td>\n<td style=\"text-align:right\">比较数字顺序</td>\n<td style=\"text-align:right\">L</td>\n<td style=\"text-align:right\">2</td>\n<td style=\"text-align:center\">num,num —&gt; bool</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;、&lt;=、&gt;、&gt;=</td>\n<td style=\"text-align:right\">比较在字母表中的顺序</td>\n<td style=\"text-align:right\">L</td>\n<td style=\"text-align:right\">2</td>\n<td style=\"text-align:center\">str,str —&gt; bool</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">instanceof</td>\n<td style=\"text-align:right\">测试对象类</td>\n<td style=\"text-align:right\">L</td>\n<td style=\"text-align:right\">2</td>\n<td style=\"text-align:center\">obj,func —&gt; bool</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">in</td>\n<td style=\"text-align:right\">测试属性是否存在</td>\n<td style=\"text-align:right\">L</td>\n<td style=\"text-align:right\">2</td>\n<td style=\"text-align:center\">str,obj —&gt; bool</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">==</td>\n<td style=\"text-align:right\">判断相等</td>\n<td style=\"text-align:right\">L</td>\n<td style=\"text-align:right\">2</td>\n<td style=\"text-align:center\">any,any —&gt; bool</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">!=</td>\n<td style=\"text-align:right\">判断不相等</td>\n<td style=\"text-align:right\">L</td>\n<td style=\"text-align:right\">2</td>\n<td style=\"text-align:center\">any,any —&gt; bool</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">===</td>\n<td style=\"text-align:right\">判断恒等</td>\n<td style=\"text-align:right\">L</td>\n<td style=\"text-align:right\">2</td>\n<td style=\"text-align:center\">any,any —&gt; bool</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">!==</td>\n<td style=\"text-align:right\">判断非恒等</td>\n<td style=\"text-align:right\">L</td>\n<td style=\"text-align:right\">2</td>\n<td style=\"text-align:center\">any,any —&gt; bool</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&amp;</td>\n<td style=\"text-align:right\">按位与</td>\n<td style=\"text-align:right\">L</td>\n<td style=\"text-align:right\">2</td>\n<td style=\"text-align:center\">int,int —&gt; int</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">^</td>\n<td style=\"text-align:right\">按位异或</td>\n<td style=\"text-align:right\">L</td>\n<td style=\"text-align:right\">2</td>\n<td style=\"text-align:center\">int,int —&gt; int</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&brvbar;</td>\n<td style=\"text-align:right\">按位或</td>\n<td style=\"text-align:right\">L</td>\n<td style=\"text-align:right\">2</td>\n<td style=\"text-align:center\">int,int —&gt; int</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&amp;&amp;</td>\n<td style=\"text-align:right\">逻辑与</td>\n<td style=\"text-align:right\">L</td>\n<td style=\"text-align:right\">2</td>\n<td style=\"text-align:center\">any,any —&gt; any</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&brvbar;&brvbar;</td>\n<td style=\"text-align:right\">逻辑或</td>\n<td style=\"text-align:right\">L</td>\n<td style=\"text-align:right\">2</td>\n<td style=\"text-align:center\">any,any —&gt; any</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">?:</td>\n<td style=\"text-align:right\">条件运算符</td>\n<td style=\"text-align:right\">R</td>\n<td style=\"text-align:right\">3</td>\n<td style=\"text-align:center\">bool, any, any —&gt; any</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">=</td>\n<td style=\"text-align:right\">变量赋值或属性对象赋值</td>\n<td style=\"text-align:right\">R</td>\n<td style=\"text-align:right\">2</td>\n<td style=\"text-align:center\">lval, any —&gt; any</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">*=, /=, %=, +=, -=, &amp;=, ^=, &brvbar;=, &lt;&lt;=, &gt;&gt;=, &gt;&gt;&gt;=</td>\n<td style=\"text-align:right\">运算且赋值</td>\n<td style=\"text-align:right\">R</td>\n<td style=\"text-align:right\">2</td>\n<td style=\"text-align:center\">lval, any —&gt; any</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">,</td>\n<td style=\"text-align:right\">忽略第一个操作数,返回第二个操作数</td>\n<td style=\"text-align:right\">L</td>\n<td style=\"text-align:right\">2</td>\n<td style=\"text-align:center\">any,any —&gt; any</td>\n</tr>\n</tbody>\n</table>\n<p>注：属性访问表达式和调用表达式优先级高于表格所有运算，typeof优先级低于前者，高于后者</p>\n<h3 id=\"8-算数表达式\"><a href=\"#8-算数表达式\" class=\"headerlink\" title=\"8.算数表达式\"></a>8.算数表达式</h3>","site":{"data":{}},"excerpt":"<p>阅读《javascript权威指南》一书做的简要笔记，js基础非常重要，在学习新技术的同时也不忘夯实基础。该书是javascript程序员的必备参考……内容组织得很好，而且非常详细，值得阅读<br>","more":"</p>\n<p>@(我的笔记)</p>\n<h2 id=\"一、词法结构\"><a href=\"#一、词法结构\" class=\"headerlink\" title=\"一、词法结构\"></a>一、词法结构</h2><h3 id=\"1-字符集\"><a href=\"#1-字符集\" class=\"headerlink\" title=\"1. 字符集\"></a>1. 字符集</h3><ul>\n<li>区分大小写，关键字、变量、函数名和所有的标识符都必须采取一致的大小写形式。</li>\n<li>空格、换行符和格式控制符， js一般会忽略空格和换行符，Unicode格式控制符可用在注释、字符串直接量和正则表达式直接量中，不能用在标识符（如变量名）中</li>\n<li><p>Unicode转义序列，以\\u为前缀，用法同上</p>\n<h3 id=\"2-注释\"><a href=\"#2-注释\" class=\"headerlink\" title=\"2.注释\"></a>2.注释</h3><p> // 这里是单行注释<br> /<em>这里是一段注释</em>/ // 这里是另一段注释<br> /<em>\n  </em>这又是一段注释<br>  <em>这里的注释可以连写多行\n  </em>/</p>\n</li>\n</ul>\n<h3 id=\"3-直接量\"><a href=\"#3-直接量\" class=\"headerlink\" title=\"3.直接量\"></a>3.直接量</h3><p>即程序中直接使用的数据值，如12,1.2，“hello world”等</p>\n<h3 id=\"4-标识符和保留字\"><a href=\"#4-标识符和保留字\" class=\"headerlink\" title=\"4.标识符和保留字\"></a>4.标识符和保留字</h3><ol>\n<li>标识符</li>\n</ol>\n<ul>\n<li>必须以字母、下划线（_）或美元符号（$）开始</li>\n<li>数字不允许作为首字符</li>\n</ul>\n<ol>\n<li><p>保留字</p>\n<pre><code>break     delete    function    return    typeof\ncase      do        if          switch    var\ncatch     else      in          this      void\ncontinue  false     instanceof  throw     while\ndebugger  for       new         true      with\ndefault   finally   null        try\n</code></pre></li>\n</ol>\n<ul>\n<li><p>ECMAScript5 关键字</p>\n<pre><code>class  const  enum  export  extends  import  super\n</code></pre></li>\n<li><p>严格模式下的保留字</p>\n<pre><code>implements let private public  yield  interface  package  protected static\n</code></pre></li>\n<li><p>JavaScript预定义的全局变量和函数</p>\n<pre><code>arguments           encodeURI             Infinity   Number         RegExp\nArray               encodeURIComponent    isFinite   Object         String\nBoolean             Error                 isNaN      parseFloat     SyntaxError\nDate                eval                  JSON       parseInt       TypeError\ndecodeURI           EvalError             Math       RangeError     undefined\ndecodeURIComponent  Function              NaN        ReferenceError URIError\n</code></pre></li>\n</ul>\n<ol>\n<li><p>可选的分号</p>\n<pre><code>// 第一个分号可省略\na = 3;\nb = 4;\n\n// 第一个分号不能省略\na = 3; b = 4;\n</code></pre></li>\n</ol>\n<ul>\n<li>以“（”、“[”、“/”、“+”或“-”开始，建议加上分号</li>\n<li>在return、break和continue后的表达式之间不能有换行</li>\n</ul>\n<h2 id=\"二、类型、值和变量\"><a href=\"#二、类型、值和变量\" class=\"headerlink\" title=\"二、类型、值和变量\"></a>二、类型、值和变量</h2><p>数据类型： 原始类型和对象类型<br>原始类型： 数字、字符串、null、undefined</p>\n<h3 id=\"1-数字\"><a href=\"#1-数字\" class=\"headerlink\" title=\"1. 数字\"></a>1. 数字</h3><ul>\n<li>整型直接量<ul>\n<li>十进制，数字序列</li>\n<li>十六进制，以“0x”或“0X”为前缀，由0~9和a（A）~f（F）构成</li>\n</ul>\n</li>\n<li>浮点型直接量<ul>\n<li>含小数点，有整数和小数部分</li>\n<li>指数记数，实数后跟e或E，再跟正负号，再加一个整型的指数， 如 6.02e23</li>\n</ul>\n</li>\n<li><p>算数运算，溢出、下溢或被零整除不报错</p>\n<ul>\n<li>溢出，值为Infinity（无穷大），或-Infinity（负无穷大）</li>\n<li>下溢，结果无限接近0，比js能表示的最小值还小。此时返回0或负零</li>\n<li><p>被零整除，返回Infinity或-Infinity。0/0 返回NaN</p>\n<pre><code>Infinity                                       // 建一个可读/写的变量初始化为Infinity\nNumber.POSITIVE_INFINITY                       // 同样的值，只读\n1 / 0                                          // 同样的值\nNumber.MAX_VALUE + 1                           // Infinity\n\nNumber.NEGATIVE_INFINITY                       // 负无穷大\n-Infinity\n-1 / 0\n-Number.MAX_VALUE - 1\n\nNaN                                            //将一个可读/写的变量初始化为NaN\nNumber.NaN                                     // 同样的值，只读\n0 / 0                                          // NaN\n\nNumer.MIN_VALUE / 2                            // 发生下溢， 为0\n-Number.MIN_VALUE / 2                          // 负零\n-1 / Infiity                                   // 负零\n-0                     \n</code></pre><ul>\n<li>NaN 和任何值都不等，包括本身。判断是否为NaN，使用 x != x，true则为NaN，反之亦然。isNaN（）函数</li>\n<li>isFinite（），参数不为NaN，Infinity或-Infinity时为true</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>二进制浮点数和四舍五入错误<br>二进制浮点数不能精确表示类似0.1这样简单的数字，计算结果也不精确</li>\n</ul>\n<h3 id=\"2-文本\"><a href=\"#2-文本\" class=\"headerlink\" title=\"2. 文本\"></a>2. 文本</h3><ul>\n<li>字符串直接量，即由单引号或双引号括起来的字符序列<br>  注： ECMAScript3中，字符串直接量必须写在一行中。<pre><code>ECMAScript5中，可拆分为数行，每行必须Yi反斜线（\\）结束\n</code></pre></li>\n<li><p>转义字符</p>\n<pre><code>\\o                        //NULL字符\n\\b                        //退格符\n\\t                        //制表符\n\\n                        //换行符\n\\v                        //垂直制表符\n\\f                        //换页符\n\\r                        //回车符\n\\&quot;                        //双引号\n\\&apos;                        // 单引号或撇号\n\\\\                        // 反斜线\n</code></pre></li>\n<li><p>字符串的使用</p>\n<ul>\n<li>字符串连接，+</li>\n<li>字符串长度， length属性</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-布尔值，true和false\"><a href=\"#3-布尔值，true和false\" class=\"headerlink\" title=\"3.  布尔值，true和false\"></a>3.  布尔值，true和false</h3><p>undefined， null，0，-0，NaN，””  —&gt; false<br>所有其他值，包括所有对象（数组）—&gt; true</p>\n<h3 id=\"4-null和undefined\"><a href=\"#4-null和undefined\" class=\"headerlink\" title=\"4.  null和undefined\"></a>4.  null和undefined</h3><ul>\n<li>null，描述“空值”，typeof null –&gt; “object”</li>\n<li>undefined，表示值的空缺，未定义，变量没有初始化。 typeof undefined –&gt; “undefined”<br>null == undefined but  null !== undefined</li>\n</ul>\n<h3 id=\"5-不可变的原始值和可变的对象引用\"><a href=\"#5-不可变的原始值和可变的对象引用\" class=\"headerlink\" title=\"5. 不可变的原始值和可变的对象引用\"></a>5. 不可变的原始值和可变的对象引用</h3><ul>\n<li>原始值是不可更改的：任何方法都无法更改一个原始值</li>\n<li>原始值的比较是值的比较</li>\n<li><p>对象的比较是引用的比较，如比较两个认读的对象或者数组</p>\n<pre><code>function equalArrays(a, b){\n    if(a.length != b.length ) return false;\n    for(var i = 0; i &lt; a.length; i++)\n        if(a[i] !== b[i]) return false;\n    return true;\n}\n</code></pre></li>\n</ul>\n<h3 id=\"6-类型转换\"><a href=\"#6-类型转换\" class=\"headerlink\" title=\"6.类型转换\"></a>6.类型转换</h3><table>\n<thead>\n<tr>\n<th>值</th>\n<th style=\"text-align:right\">转换为字符串</th>\n<th style=\"text-align:left\">数字</th>\n<th style=\"text-align:left\">布尔值</th>\n<th>对象</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>undefined</td>\n<td style=\"text-align:right\">“undefined”</td>\n<td style=\"text-align:left\">NaN</td>\n<td style=\"text-align:left\">false</td>\n<td>throws TypeError</td>\n</tr>\n<tr>\n<td>null</td>\n<td style=\"text-align:right\">“null”</td>\n<td style=\"text-align:left\">0</td>\n<td style=\"text-align:left\">false</td>\n<td>throws TypeError</td>\n</tr>\n<tr>\n<td>true</td>\n<td style=\"text-align:right\">“true”</td>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\"></td>\n<td>new Boolean(true)</td>\n</tr>\n<tr>\n<td>false</td>\n<td style=\"text-align:right\">“false”</td>\n<td style=\"text-align:left\">0</td>\n<td style=\"text-align:left\"></td>\n<td>new Boolean(false)</td>\n</tr>\n<tr>\n<td>“”(空字符串)</td>\n<td style=\"text-align:right\"></td>\n<td style=\"text-align:left\">0</td>\n<td style=\"text-align:left\">false</td>\n<td>new String(“”)</td>\n</tr>\n<tr>\n<td>“1.2”(非空，数字)</td>\n<td style=\"text-align:right\"></td>\n<td style=\"text-align:left\">1.2</td>\n<td style=\"text-align:left\">true</td>\n<td>new String(“1.2”)</td>\n</tr>\n<tr>\n<td>“one”(非空，非数字)</td>\n<td style=\"text-align:right\"></td>\n<td style=\"text-align:left\">NaN</td>\n<td style=\"text-align:left\">true</td>\n<td>new String(“one”)</td>\n</tr>\n<tr>\n<td>0</td>\n<td style=\"text-align:right\">“0”</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">false</td>\n<td>new Number(0)</td>\n</tr>\n<tr>\n<td>-0</td>\n<td style=\"text-align:right\">“0”</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">false</td>\n<td>new Number(-0)</td>\n</tr>\n<tr>\n<td>NaN</td>\n<td style=\"text-align:right\">“NaN”</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">false</td>\n<td>new Number(NaN)</td>\n</tr>\n<tr>\n<td>Infinity</td>\n<td style=\"text-align:right\">“Infinity”</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">true</td>\n<td>new Number(Infinity)</td>\n</tr>\n<tr>\n<td>-Infinity</td>\n<td style=\"text-align:right\">“-Infinity”</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">true</td>\n<td>new Number(-Infinity)</td>\n</tr>\n<tr>\n<td>1(无穷大，非零)</td>\n<td style=\"text-align:right\">“1”</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">true</td>\n<td>new Number(1)</td>\n</tr>\n<tr>\n<td>{} (任意对象)</td>\n<td style=\"text-align:right\">参考6.3</td>\n<td style=\"text-align:left\">参考6.3</td>\n<td style=\"text-align:left\">true</td>\n<td></td>\n</tr>\n<tr>\n<td>[] (任意数组)</td>\n<td style=\"text-align:right\">“”</td>\n<td style=\"text-align:left\">0</td>\n<td style=\"text-align:left\">true</td>\n<td></td>\n</tr>\n<tr>\n<td>[9] (1个数字元素)</td>\n<td style=\"text-align:right\">“9”</td>\n<td style=\"text-align:left\">9</td>\n<td style=\"text-align:left\">true</td>\n<td></td>\n</tr>\n<tr>\n<td>[‘a’] (其他数组)</td>\n<td style=\"text-align:right\">使用join()方法</td>\n<td style=\"text-align:left\">NaN</td>\n<td style=\"text-align:left\">true</td>\n<td></td>\n</tr>\n<tr>\n<td>function(){} (任意函数)</td>\n<td style=\"text-align:right\">参考6.3</td>\n<td style=\"text-align:left\">NaN</td>\n<td style=\"text-align:left\">true</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>6.1. 转换和相等性 ，一个值转换为另一个值并不意味着两个值相等</li>\n<li>6.2<ul>\n<li>显示类型转换，最简单的方法是使用Boolean()、Number()、String()或Object()函数。注：除了null或undefined之外的任何值都具有toString（）方法</li>\n<li>隐式类型转换，如使用一元”+”，一元”!”。 Number类定义的toString（）可接受表示转换基数的可选参数，parseInt（）第二个可选参数也为转换基数</li>\n</ul>\n</li>\n<li><p>6.3 对象转换为原始值。</p>\n<ul>\n<li>对象转换布尔值：所有的对象都转换为true</li>\n<li><p>对象转换字符串和数字：<br>对象到字符串，先toString(),若没有该方法则valueOf（）。否则抛出类型错误异常。<br>对象到数字，先valueOf(),若没有该方法则toString（），否则抛出类型错误异常。</p>\n<ul>\n<li><p>toString()，返回一个反映这个对象的字符串</p>\n<ul>\n<li>数组类的toString()方法将每个数组元素转换为字符串，并在元素之间添加逗号后合并成结果字符串</li>\n<li>函数类的toString()方法返回了这个函数的实现定义的表示方式，即该函数的JavaScript源代码字符串</li>\n<li>日期类的toString()方法返回一个可读的日期和时间字符串</li>\n<li><p>RegExp类的toString()将其转换为表示正则表达式直接量的字符串</p>\n<pre><code>[1, 2, 3].toString()  // &quot;1,2,3&quot;\n(function(x) { f(x); }).toString(); // &quot;function(x){\\n f(x); \\n}&quot;\n/\\d+/g.toString(); // &quot;/\\d+/g&quot;\nnew Date(2010, 0, 1).toString(); // &quot;Mon Jun 19 2017 00:00:00 GMT+0800 (中国标准时间)&quot;\n</code></pre></li>\n</ul>\n</li>\n<li><p>valueOf()，返回对象本身，日期类返回1970.01.01以来的毫秒数</p>\n<pre><code>var now = new Date()\ntypeof(now + 1);  // &quot;string&quot;, &quot;+&quot;将日期转换为字符串\ntypeof(now - 1); // &quot;number&quot;， “-”使用对象到数字的转换\nnow == now.toString(); // true， 隐式的和显示的字符串转换\nnow &gt; (now - 1); // true， “&gt;” 将日期转换为数字\n</code></pre></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>6.4 变量声明，使用关键字var来声明 ，一个var可声明多个变量，也可将变量的初始赋值和变量声明合写在一起。未赋值的初始值为undefined</li>\n<li><p>6.5 变量作用域，全局变量拥有全局作用域，函数体内的变量是局部变量，函数参数也是局部变量，作用域为该函数。在函数体内，局部变量的优先级高于同名的全局变量</p>\n<ul>\n<li><p>函数作用域和声明提前。函数朱用语是指在函数内声明的所有变量在函数体内始终是可见的。声明提前是指变量在声明之前可以使用，实际上是变量被提前至函数体的顶部或者全局顶部进行声明，当然值为undefined</p>\n<pre><code>var scope = &apos;global&apos;;\nfunction f(){\n    console.log(scope); // undefined\n    var scope = &apos;local&apos;;\n    console.log(scope); // local\n}\n</code></pre></li>\n<li>作为属性的变量，使用var声明的变量不能通过delete删除。在非严格模式给一个未声明的变量赋值，可以删除</li>\n<li>作用域链，是一个对象列表或者链表。在js的最顶层代码中，作用域链由一个全局对象组成。在不包含嵌套的函数体内，作用域链上有两个对象，第一个是定义函数参数和局部变量的对象，第二个是全局对象。在一个嵌套的函数体内，作用域链上至少有三个对象.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"三、表达式和运算符\"><a href=\"#三、表达式和运算符\" class=\"headerlink\" title=\"三、表达式和运算符\"></a>三、表达式和运算符</h2><h3 id=\"1-原始表达式，包含常量或直接量、关键字和变量\"><a href=\"#1-原始表达式，包含常量或直接量、关键字和变量\" class=\"headerlink\" title=\"1.原始表达式，包含常量或直接量、关键字和变量\"></a>1.原始表达式，包含常量或直接量、关键字和变量</h3><h3 id=\"2-对象和数组的初始化表达式\"><a href=\"#2-对象和数组的初始化表达式\" class=\"headerlink\" title=\"2.对象和数组的初始化表达式\"></a>2.对象和数组的初始化表达式</h3><ol>\n<li>数组初始化表达式，通过一对方括号和其内由逗号隔开的列表构成的。数组直接量中的列表逗号之间的元素可以省略，则空位填充值undefined。结尾处可以留下单个逗号</li>\n<li>对象初始化表达式，也称“函数直接量”，</li>\n<li>由一对花括号和其内由的表达式（包含一个属性名和一个冒号作为前缀）组成</li>\n</ol>\n<h3 id=\"3-函数定义表达式\"><a href=\"#3-函数定义表达式\" class=\"headerlink\" title=\"3.函数定义表达式\"></a>3.函数定义表达式</h3><p>包含关键字function，然后是一对圆括号，括号内是一个以逗号分割的列表，列表包含0个或多个标识符（参数），最后跟花括号包含的代码块</p>\n<pre><code>var square = function(x){\n     return x*x\n}\n</code></pre><h3 id=\"4-属性访问表达式\"><a href=\"#4-属性访问表达式\" class=\"headerlink\" title=\"4.属性访问表达式\"></a>4.属性访问表达式</h3><pre><code>expression.identifier\nexpression[expression] //属性名称是一个保留字或者包含空格和标点符号或是一个数字，使用此方式\n</code></pre><h3 id=\"5-调用表达式\"><a href=\"#5-调用表达式\" class=\"headerlink\" title=\"5.调用表达式\"></a>5.调用表达式</h3><p>是一种调用（或者执行）函数或方法的语法表示</p>\n<h3 id=\"6-对象创建表达式\"><a href=\"#6-对象创建表达式\" class=\"headerlink\" title=\"6.对象创建表达式\"></a>6.对象创建表达式</h3><p>创建一个对象并调用一个函数（构造函数）初始化新对象的属性，多了一个关键字new</p>\n<pre><code>new Object();\nnew Point(2,3);\n</code></pre><h3 id=\"7-运算符概述\"><a href=\"#7-运算符概述\" class=\"headerlink\" title=\"7.运算符概述\"></a>7.运算符概述</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">运算符</th>\n<th style=\"text-align:right\">操作</th>\n<th style=\"text-align:right\">A</th>\n<th style=\"text-align:right\">N</th>\n<th style=\"text-align:center\">类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">++</td>\n<td style=\"text-align:right\">前/后增量</td>\n<td style=\"text-align:right\">R</td>\n<td style=\"text-align:right\">1</td>\n<td style=\"text-align:center\">lval —&gt; num</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">–</td>\n<td style=\"text-align:right\">前/后减量</td>\n<td style=\"text-align:right\">R</td>\n<td style=\"text-align:right\">1</td>\n<td style=\"text-align:center\">lval —&gt; num</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-</td>\n<td style=\"text-align:right\">求反</td>\n<td style=\"text-align:right\">R</td>\n<td style=\"text-align:right\">1</td>\n<td style=\"text-align:center\">num —&gt; num</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">+</td>\n<td style=\"text-align:right\">转换为数字</td>\n<td style=\"text-align:right\">R</td>\n<td style=\"text-align:right\">1</td>\n<td style=\"text-align:center\">num —&gt; num</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">~</td>\n<td style=\"text-align:right\">按位求反</td>\n<td style=\"text-align:right\">R</td>\n<td style=\"text-align:right\">1</td>\n<td style=\"text-align:center\">int —&gt; int</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">!</td>\n<td style=\"text-align:right\">逻辑非</td>\n<td style=\"text-align:right\">R</td>\n<td style=\"text-align:right\">1</td>\n<td style=\"text-align:center\">bool —&gt; bool</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">delete</td>\n<td style=\"text-align:right\">删除属性</td>\n<td style=\"text-align:right\">R</td>\n<td style=\"text-align:right\">1</td>\n<td style=\"text-align:center\">lval —&gt; bool</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">typeof</td>\n<td style=\"text-align:right\">检测操作数类型</td>\n<td style=\"text-align:right\">R</td>\n<td style=\"text-align:right\">1</td>\n<td style=\"text-align:center\">any —&gt; str</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">void</td>\n<td style=\"text-align:right\">返回undefined值</td>\n<td style=\"text-align:right\">R</td>\n<td style=\"text-align:right\">1</td>\n<td style=\"text-align:center\">any —&gt; undefined</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">*、/、%</td>\n<td style=\"text-align:right\">乘、除、求余</td>\n<td style=\"text-align:right\">L</td>\n<td style=\"text-align:right\">2</td>\n<td style=\"text-align:center\">num,num —&gt; num</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">+、-</td>\n<td style=\"text-align:right\">加、减</td>\n<td style=\"text-align:right\">L</td>\n<td style=\"text-align:right\">2</td>\n<td style=\"text-align:center\">num,num —&gt; num</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">+</td>\n<td style=\"text-align:right\">字符串连接</td>\n<td style=\"text-align:right\">L</td>\n<td style=\"text-align:right\">2</td>\n<td style=\"text-align:center\">str,str —&gt; str</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;&lt;</td>\n<td style=\"text-align:right\">左移位</td>\n<td style=\"text-align:right\">L</td>\n<td style=\"text-align:right\">2</td>\n<td style=\"text-align:center\">int,int —&gt; int</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&gt;&gt;</td>\n<td style=\"text-align:right\">有符号右移</td>\n<td style=\"text-align:right\">L</td>\n<td style=\"text-align:right\">2</td>\n<td style=\"text-align:center\">int,int —&gt; int</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&gt;&gt;&gt;</td>\n<td style=\"text-align:right\">无符号左移</td>\n<td style=\"text-align:right\">L</td>\n<td style=\"text-align:right\">2</td>\n<td style=\"text-align:center\">int,int —&gt; int</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;、&lt;=、&gt;、&gt;=</td>\n<td style=\"text-align:right\">比较数字顺序</td>\n<td style=\"text-align:right\">L</td>\n<td style=\"text-align:right\">2</td>\n<td style=\"text-align:center\">num,num —&gt; bool</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;、&lt;=、&gt;、&gt;=</td>\n<td style=\"text-align:right\">比较在字母表中的顺序</td>\n<td style=\"text-align:right\">L</td>\n<td style=\"text-align:right\">2</td>\n<td style=\"text-align:center\">str,str —&gt; bool</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">instanceof</td>\n<td style=\"text-align:right\">测试对象类</td>\n<td style=\"text-align:right\">L</td>\n<td style=\"text-align:right\">2</td>\n<td style=\"text-align:center\">obj,func —&gt; bool</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">in</td>\n<td style=\"text-align:right\">测试属性是否存在</td>\n<td style=\"text-align:right\">L</td>\n<td style=\"text-align:right\">2</td>\n<td style=\"text-align:center\">str,obj —&gt; bool</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">==</td>\n<td style=\"text-align:right\">判断相等</td>\n<td style=\"text-align:right\">L</td>\n<td style=\"text-align:right\">2</td>\n<td style=\"text-align:center\">any,any —&gt; bool</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">!=</td>\n<td style=\"text-align:right\">判断不相等</td>\n<td style=\"text-align:right\">L</td>\n<td style=\"text-align:right\">2</td>\n<td style=\"text-align:center\">any,any —&gt; bool</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">===</td>\n<td style=\"text-align:right\">判断恒等</td>\n<td style=\"text-align:right\">L</td>\n<td style=\"text-align:right\">2</td>\n<td style=\"text-align:center\">any,any —&gt; bool</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">!==</td>\n<td style=\"text-align:right\">判断非恒等</td>\n<td style=\"text-align:right\">L</td>\n<td style=\"text-align:right\">2</td>\n<td style=\"text-align:center\">any,any —&gt; bool</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&amp;</td>\n<td style=\"text-align:right\">按位与</td>\n<td style=\"text-align:right\">L</td>\n<td style=\"text-align:right\">2</td>\n<td style=\"text-align:center\">int,int —&gt; int</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">^</td>\n<td style=\"text-align:right\">按位异或</td>\n<td style=\"text-align:right\">L</td>\n<td style=\"text-align:right\">2</td>\n<td style=\"text-align:center\">int,int —&gt; int</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&brvbar;</td>\n<td style=\"text-align:right\">按位或</td>\n<td style=\"text-align:right\">L</td>\n<td style=\"text-align:right\">2</td>\n<td style=\"text-align:center\">int,int —&gt; int</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&amp;&amp;</td>\n<td style=\"text-align:right\">逻辑与</td>\n<td style=\"text-align:right\">L</td>\n<td style=\"text-align:right\">2</td>\n<td style=\"text-align:center\">any,any —&gt; any</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&brvbar;&brvbar;</td>\n<td style=\"text-align:right\">逻辑或</td>\n<td style=\"text-align:right\">L</td>\n<td style=\"text-align:right\">2</td>\n<td style=\"text-align:center\">any,any —&gt; any</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">?:</td>\n<td style=\"text-align:right\">条件运算符</td>\n<td style=\"text-align:right\">R</td>\n<td style=\"text-align:right\">3</td>\n<td style=\"text-align:center\">bool, any, any —&gt; any</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">=</td>\n<td style=\"text-align:right\">变量赋值或属性对象赋值</td>\n<td style=\"text-align:right\">R</td>\n<td style=\"text-align:right\">2</td>\n<td style=\"text-align:center\">lval, any —&gt; any</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">*=, /=, %=, +=, -=, &amp;=, ^=, &brvbar;=, &lt;&lt;=, &gt;&gt;=, &gt;&gt;&gt;=</td>\n<td style=\"text-align:right\">运算且赋值</td>\n<td style=\"text-align:right\">R</td>\n<td style=\"text-align:right\">2</td>\n<td style=\"text-align:center\">lval, any —&gt; any</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">,</td>\n<td style=\"text-align:right\">忽略第一个操作数,返回第二个操作数</td>\n<td style=\"text-align:right\">L</td>\n<td style=\"text-align:right\">2</td>\n<td style=\"text-align:center\">any,any —&gt; any</td>\n</tr>\n</tbody>\n</table>\n<p>注：属性访问表达式和调用表达式优先级高于表格所有运算，typeof优先级低于前者，高于后者</p>\n<h3 id=\"8-算数表达式\"><a href=\"#8-算数表达式\" class=\"headerlink\" title=\"8.算数表达式\"></a>8.算数表达式</h3>"},{"title":"oss+hexo 博客部署","date":"2017-05-26T09:42:37.000Z","_content":"oss对象存储用来搭建个人博客是我同事告诉我的，比较适合前端用，写点笔记。hexo部署到oss有一个注意的点就是oss不能使用相对路径进行访问（是用来存储的），比如访问a.com\\b\\并不会访问到其页面内容，需要在路径后面加上index.html.\n<!--- more --->\n\n1. 在hexo默认配置文件中找到permalink参数，在其后面加上index.html\n\n    permalink: :year/:month/:day/:title/index.html\n\n2. 随意找个文件位置，创建文件oss_config.json\n\n        {\n          \"accessKeyId\": \"\",\n          \"accessKeySecret\": \"\",\n          \"endpoint\": \"oss-cn-shanghai.aliyuncs.com\",\n          \"bucketName\": \"djllhs\",\n          \"ossDomain\": \"djllhs.oss-cn-shanghai.aliyuncs.com\",\n          \"localDir\": \"E:/DJling resource/djl/public/\"\n        }\n\n\n* accessKeyId和accessKeySecret是在阿里云上生成的，鼠标移入个人的名称就会显示accesskeys的图标，点击，按照提示操作即可。没有就创建。将对应的accessKeyId和accessKeySecret填入对应的字段\n\n    ![alt text](/images/1.png)\n\n* 从左侧导航中找到对象存储oss，点击进入概览，点击你的域名，进入Bucket概览页，找到下方的oss外网域名，复制到对应的字段ossDomain。鼠标移上去，点击显示的EndPoint。进入到访问域名和数据中心，找到你所在的地区，复制外网EndPoint到对应的字段endpoint\n\n    ![alt text](/images/2.png)\n\n    ![alt text](/images/3.png)\n\n    ![alt text](/images/4.png)\n\n* bucketName即为你的Bucket概览的名字\n\n    ![alt text](/images/5.png)\n\n* localDir的值为你的hexo博客的public的路径，如：E:/DJling resource/djl/public/\n\n\n3. 创建cdn.py,cdn的官方文档，用来刷新的，可去查阅\n\n        #!/usr/bin/python\n        # -*- coding:utf-8 -*-\n\n        import sys,os\n        import urllib, urllib2\n        import base64\n        import hmac\n        import hashlib\n        from hashlib import sha1\n        import time\n        import uuid\n        import json\n        from optparse import OptionParser\n        import ConfigParser\n        import traceback\n        import requests\n\n        access_key_id = '';\n        access_key_secret = '';\n        cdn_server_address = 'https://cdn.aliyuncs.com'\n        CONFIGFILE = os.getcwd() + '/aliyun.ini'\n        CONFIGSECTION = 'Credentials'\n        cmdlist = '''\n        接口说明请参照pdf文档\n        '''\n\n        def percent_encode(str):\n            res = urllib.quote(str.decode(sys.stdin.encoding).encode('utf8'), '')\n            res = res.replace('+', '%20')\n            res = res.replace('*', '%2A')\n            res = res.replace('%7E', '~')\n            return res\n\n        def compute_signature(parameters, access_key_secret):\n            sortedParameters = sorted(parameters.items(), key=lambda parameters: parameters[0])\n\n            canonicalizedQueryString = ''\n            for (k,v) in sortedParameters:\n                canonicalizedQueryString += '&' + percent_encode(k) + '=' + percent_encode(v)\n\n            stringToSign = 'GET&%2F&' + percent_encode(canonicalizedQueryString[1:])\n\n            h = hmac.new(access_key_secret + \"&\", stringToSign, sha1)\n            signature = base64.encodestring(h.digest()).strip()\n            return signature\n\n        def compose_url(user_params):\n            timestamp = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime())\n\n            parameters = { \\\n                    'Format'        : 'JSON', \\\n                    'Version'       : '2014-11-11', \\\n                    'AccessKeyId'   : access_key_id, \\\n                    'SignatureVersion'  : '1.0', \\\n                    'SignatureMethod'   : 'HMAC-SHA1', \\\n                    'SignatureNonce'    : str(uuid.uuid1()), \\\n                    'TimeStamp'         : timestamp, \\\n            }\n\n            for key in user_params.keys():\n                parameters[key] = user_params[key]\n\n            signature = compute_signature(parameters, access_key_secret)\n            parameters['Signature'] = signature\n            url = cdn_server_address + \"/?\" + urllib.urlencode(parameters)\n            return url\n\n        def make_request(user_params, quiet=False):\n            url = compose_url(user_params)\n            r = requests.get(url)\n            print(r.content)\n\n        def configure_accesskeypair(args, options):\n            if options.accesskeyid is None or options.accesskeysecret is None:\n                print(\"config miss parameters, use --id=[accesskeyid] --secret=[accesskeysecret]\")\n                sys.exit(1)\n            config = ConfigParser.RawConfigParser()\n            config.add_section(CONFIGSECTION)\n            config.set(CONFIGSECTION, 'accesskeyid', options.accesskeyid)\n            config.set(CONFIGSECTION, 'accesskeysecret', options.accesskeysecret)\n            cfgfile = open(CONFIGFILE, 'w+')\n            config.write(cfgfile)\n            cfgfile.close()\n\n        def setup_credentials():\n            config = ConfigParser.ConfigParser()\n            try:\n                config.read(CONFIGFILE)\n                global access_key_id\n                global access_key_secret\n                access_key_id = config.get(CONFIGSECTION, 'accesskeyid')\n                access_key_secret = config.get(CONFIGSECTION, 'accesskeysecret')\n            except Exception, e:\n                print traceback.format_exc()\n                print(\"can't get access key pair, use config --id=[accesskeyid] --secret=[accesskeysecret] to setup\")\n                sys.exit(1)\n\n\n\n        if __name__ == '__main__':\n            parser = OptionParser(\"%s Action=action Param1=Value1 Param2=Value2\\n\" % sys.argv[0])\n            parser.add_option(\"-i\", \"--id\", dest=\"accesskeyid\", help=\"specify access key id\")\n            parser.add_option(\"-s\", \"--secret\", dest=\"accesskeysecret\", help=\"specify access key secret\")\n\n            (options, args) = parser.parse_args()\n            if len(args) < 1:\n                parser.print_help()\n                sys.exit(0)\n\n            if args[0] == 'help':\n                print cmdlist\n                sys.exit(0)\n            if args[0] != 'config':\n                setup_credentials()\n            else: #it's a configure id/secret command\n                configure_accesskeypair(args, options)\n                sys.exit(0)\n\n            user_params = {}\n            idx = 1\n            if not sys.argv[1].lower().startswith('action='):\n                user_params['action'] = sys.argv[1]\n                idx = 2\n\n            for arg in sys.argv[idx:]:\n                try:\n                    key, value = arg.split('=')\n                    user_params[key.strip()] = value\n                except ValueError, e:\n                    print(e.read().strip())\n                    raise SystemExit(e)\n            make_request(user_params)\n\n4. 创建配置文件aliyun.init\n\n        [Credentials]\n        accesskeyid = LTAIowA8PvCJxEA8\n        accesskeysecret = 2bHXbmggon6ng6hJzLNaSkLKbIdzPe\n5. 创建发布文件incremental_upload_to_aliyun_oss.py,这个代码就自己写了哈\n6. 创建脚本publish.bat\n\n        python incremental_upload_to_aliyun_oss.py\n\n        python cdn.py Action=RefreshObjectCaches ObjectType=File ObjectPath=你的域名\n\n        @pause\n\n注意：必须安装Python哟\n","source":"_posts/oss-hexo-publish.md","raw":"---\ntitle: oss+hexo 博客部署\ndate: 2017-05-26 17:42:37\ntags:\n---\noss对象存储用来搭建个人博客是我同事告诉我的，比较适合前端用，写点笔记。hexo部署到oss有一个注意的点就是oss不能使用相对路径进行访问（是用来存储的），比如访问a.com\\b\\并不会访问到其页面内容，需要在路径后面加上index.html.\n<!--- more --->\n\n1. 在hexo默认配置文件中找到permalink参数，在其后面加上index.html\n\n    permalink: :year/:month/:day/:title/index.html\n\n2. 随意找个文件位置，创建文件oss_config.json\n\n        {\n          \"accessKeyId\": \"\",\n          \"accessKeySecret\": \"\",\n          \"endpoint\": \"oss-cn-shanghai.aliyuncs.com\",\n          \"bucketName\": \"djllhs\",\n          \"ossDomain\": \"djllhs.oss-cn-shanghai.aliyuncs.com\",\n          \"localDir\": \"E:/DJling resource/djl/public/\"\n        }\n\n\n* accessKeyId和accessKeySecret是在阿里云上生成的，鼠标移入个人的名称就会显示accesskeys的图标，点击，按照提示操作即可。没有就创建。将对应的accessKeyId和accessKeySecret填入对应的字段\n\n    ![alt text](/images/1.png)\n\n* 从左侧导航中找到对象存储oss，点击进入概览，点击你的域名，进入Bucket概览页，找到下方的oss外网域名，复制到对应的字段ossDomain。鼠标移上去，点击显示的EndPoint。进入到访问域名和数据中心，找到你所在的地区，复制外网EndPoint到对应的字段endpoint\n\n    ![alt text](/images/2.png)\n\n    ![alt text](/images/3.png)\n\n    ![alt text](/images/4.png)\n\n* bucketName即为你的Bucket概览的名字\n\n    ![alt text](/images/5.png)\n\n* localDir的值为你的hexo博客的public的路径，如：E:/DJling resource/djl/public/\n\n\n3. 创建cdn.py,cdn的官方文档，用来刷新的，可去查阅\n\n        #!/usr/bin/python\n        # -*- coding:utf-8 -*-\n\n        import sys,os\n        import urllib, urllib2\n        import base64\n        import hmac\n        import hashlib\n        from hashlib import sha1\n        import time\n        import uuid\n        import json\n        from optparse import OptionParser\n        import ConfigParser\n        import traceback\n        import requests\n\n        access_key_id = '';\n        access_key_secret = '';\n        cdn_server_address = 'https://cdn.aliyuncs.com'\n        CONFIGFILE = os.getcwd() + '/aliyun.ini'\n        CONFIGSECTION = 'Credentials'\n        cmdlist = '''\n        接口说明请参照pdf文档\n        '''\n\n        def percent_encode(str):\n            res = urllib.quote(str.decode(sys.stdin.encoding).encode('utf8'), '')\n            res = res.replace('+', '%20')\n            res = res.replace('*', '%2A')\n            res = res.replace('%7E', '~')\n            return res\n\n        def compute_signature(parameters, access_key_secret):\n            sortedParameters = sorted(parameters.items(), key=lambda parameters: parameters[0])\n\n            canonicalizedQueryString = ''\n            for (k,v) in sortedParameters:\n                canonicalizedQueryString += '&' + percent_encode(k) + '=' + percent_encode(v)\n\n            stringToSign = 'GET&%2F&' + percent_encode(canonicalizedQueryString[1:])\n\n            h = hmac.new(access_key_secret + \"&\", stringToSign, sha1)\n            signature = base64.encodestring(h.digest()).strip()\n            return signature\n\n        def compose_url(user_params):\n            timestamp = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime())\n\n            parameters = { \\\n                    'Format'        : 'JSON', \\\n                    'Version'       : '2014-11-11', \\\n                    'AccessKeyId'   : access_key_id, \\\n                    'SignatureVersion'  : '1.0', \\\n                    'SignatureMethod'   : 'HMAC-SHA1', \\\n                    'SignatureNonce'    : str(uuid.uuid1()), \\\n                    'TimeStamp'         : timestamp, \\\n            }\n\n            for key in user_params.keys():\n                parameters[key] = user_params[key]\n\n            signature = compute_signature(parameters, access_key_secret)\n            parameters['Signature'] = signature\n            url = cdn_server_address + \"/?\" + urllib.urlencode(parameters)\n            return url\n\n        def make_request(user_params, quiet=False):\n            url = compose_url(user_params)\n            r = requests.get(url)\n            print(r.content)\n\n        def configure_accesskeypair(args, options):\n            if options.accesskeyid is None or options.accesskeysecret is None:\n                print(\"config miss parameters, use --id=[accesskeyid] --secret=[accesskeysecret]\")\n                sys.exit(1)\n            config = ConfigParser.RawConfigParser()\n            config.add_section(CONFIGSECTION)\n            config.set(CONFIGSECTION, 'accesskeyid', options.accesskeyid)\n            config.set(CONFIGSECTION, 'accesskeysecret', options.accesskeysecret)\n            cfgfile = open(CONFIGFILE, 'w+')\n            config.write(cfgfile)\n            cfgfile.close()\n\n        def setup_credentials():\n            config = ConfigParser.ConfigParser()\n            try:\n                config.read(CONFIGFILE)\n                global access_key_id\n                global access_key_secret\n                access_key_id = config.get(CONFIGSECTION, 'accesskeyid')\n                access_key_secret = config.get(CONFIGSECTION, 'accesskeysecret')\n            except Exception, e:\n                print traceback.format_exc()\n                print(\"can't get access key pair, use config --id=[accesskeyid] --secret=[accesskeysecret] to setup\")\n                sys.exit(1)\n\n\n\n        if __name__ == '__main__':\n            parser = OptionParser(\"%s Action=action Param1=Value1 Param2=Value2\\n\" % sys.argv[0])\n            parser.add_option(\"-i\", \"--id\", dest=\"accesskeyid\", help=\"specify access key id\")\n            parser.add_option(\"-s\", \"--secret\", dest=\"accesskeysecret\", help=\"specify access key secret\")\n\n            (options, args) = parser.parse_args()\n            if len(args) < 1:\n                parser.print_help()\n                sys.exit(0)\n\n            if args[0] == 'help':\n                print cmdlist\n                sys.exit(0)\n            if args[0] != 'config':\n                setup_credentials()\n            else: #it's a configure id/secret command\n                configure_accesskeypair(args, options)\n                sys.exit(0)\n\n            user_params = {}\n            idx = 1\n            if not sys.argv[1].lower().startswith('action='):\n                user_params['action'] = sys.argv[1]\n                idx = 2\n\n            for arg in sys.argv[idx:]:\n                try:\n                    key, value = arg.split('=')\n                    user_params[key.strip()] = value\n                except ValueError, e:\n                    print(e.read().strip())\n                    raise SystemExit(e)\n            make_request(user_params)\n\n4. 创建配置文件aliyun.init\n\n        [Credentials]\n        accesskeyid = LTAIowA8PvCJxEA8\n        accesskeysecret = 2bHXbmggon6ng6hJzLNaSkLKbIdzPe\n5. 创建发布文件incremental_upload_to_aliyun_oss.py,这个代码就自己写了哈\n6. 创建脚本publish.bat\n\n        python incremental_upload_to_aliyun_oss.py\n\n        python cdn.py Action=RefreshObjectCaches ObjectType=File ObjectPath=你的域名\n\n        @pause\n\n注意：必须安装Python哟\n","slug":"oss-hexo-publish","published":1,"updated":"2017-05-26T10:44:14.510Z","_id":"cj35px5na0002x8dekn4q0rbr","comments":1,"layout":"post","photos":[],"link":"","content":"<p>oss对象存储用来搭建个人博客是我同事告诉我的，比较适合前端用，写点笔记。hexo部署到oss有一个注意的点就是oss不能使用相对路径进行访问（是用来存储的），比如访问a.com\\b\\并不会访问到其页面内容，需要在路径后面加上index.html.<br><a id=\"more\"></a></p>\n<ol>\n<li><p>在hexo默认配置文件中找到permalink参数，在其后面加上index.html</p>\n<p> permalink: :year/:month/:day/:title/index.html</p>\n</li>\n<li><p>随意找个文件位置，创建文件oss_config.json</p>\n<pre><code>{\n  &quot;accessKeyId&quot;: &quot;&quot;,\n  &quot;accessKeySecret&quot;: &quot;&quot;,\n  &quot;endpoint&quot;: &quot;oss-cn-shanghai.aliyuncs.com&quot;,\n  &quot;bucketName&quot;: &quot;djllhs&quot;,\n  &quot;ossDomain&quot;: &quot;djllhs.oss-cn-shanghai.aliyuncs.com&quot;,\n  &quot;localDir&quot;: &quot;E:/DJling resource/djl/public/&quot;\n}\n</code></pre></li>\n</ol>\n<ul>\n<li><p>accessKeyId和accessKeySecret是在阿里云上生成的，鼠标移入个人的名称就会显示accesskeys的图标，点击，按照提示操作即可。没有就创建。将对应的accessKeyId和accessKeySecret填入对应的字段</p>\n<p>  <img src=\"/images/1.png\" alt=\"alt text\"></p>\n</li>\n<li><p>从左侧导航中找到对象存储oss，点击进入概览，点击你的域名，进入Bucket概览页，找到下方的oss外网域名，复制到对应的字段ossDomain。鼠标移上去，点击显示的EndPoint。进入到访问域名和数据中心，找到你所在的地区，复制外网EndPoint到对应的字段endpoint</p>\n<p>  <img src=\"/images/2.png\" alt=\"alt text\"></p>\n<p>  <img src=\"/images/3.png\" alt=\"alt text\"></p>\n<p>  <img src=\"/images/4.png\" alt=\"alt text\"></p>\n</li>\n<li><p>bucketName即为你的Bucket概览的名字</p>\n<p>  <img src=\"/images/5.png\" alt=\"alt text\"></p>\n</li>\n<li><p>localDir的值为你的hexo博客的public的路径，如：E:/DJling resource/djl/public/</p>\n</li>\n</ul>\n<ol>\n<li><p>创建cdn.py,cdn的官方文档，用来刷新的，可去查阅</p>\n<pre><code>#!/usr/bin/python\n# -*- coding:utf-8 -*-\n\nimport sys,os\nimport urllib, urllib2\nimport base64\nimport hmac\nimport hashlib\nfrom hashlib import sha1\nimport time\nimport uuid\nimport json\nfrom optparse import OptionParser\nimport ConfigParser\nimport traceback\nimport requests\n\naccess_key_id = &apos;&apos;;\naccess_key_secret = &apos;&apos;;\ncdn_server_address = &apos;https://cdn.aliyuncs.com&apos;\nCONFIGFILE = os.getcwd() + &apos;/aliyun.ini&apos;\nCONFIGSECTION = &apos;Credentials&apos;\ncmdlist = &apos;&apos;&apos;\n接口说明请参照pdf文档\n&apos;&apos;&apos;\n\ndef percent_encode(str):\n    res = urllib.quote(str.decode(sys.stdin.encoding).encode(&apos;utf8&apos;), &apos;&apos;)\n    res = res.replace(&apos;+&apos;, &apos;%20&apos;)\n    res = res.replace(&apos;*&apos;, &apos;%2A&apos;)\n    res = res.replace(&apos;%7E&apos;, &apos;~&apos;)\n    return res\n\ndef compute_signature(parameters, access_key_secret):\n    sortedParameters = sorted(parameters.items(), key=lambda parameters: parameters[0])\n\n    canonicalizedQueryString = &apos;&apos;\n    for (k,v) in sortedParameters:\n        canonicalizedQueryString += &apos;&amp;&apos; + percent_encode(k) + &apos;=&apos; + percent_encode(v)\n\n    stringToSign = &apos;GET&amp;%2F&amp;&apos; + percent_encode(canonicalizedQueryString[1:])\n\n    h = hmac.new(access_key_secret + &quot;&amp;&quot;, stringToSign, sha1)\n    signature = base64.encodestring(h.digest()).strip()\n    return signature\n\ndef compose_url(user_params):\n    timestamp = time.strftime(&quot;%Y-%m-%dT%H:%M:%SZ&quot;, time.gmtime())\n\n    parameters = { \\\n            &apos;Format&apos;        : &apos;JSON&apos;, \\\n            &apos;Version&apos;       : &apos;2014-11-11&apos;, \\\n            &apos;AccessKeyId&apos;   : access_key_id, \\\n            &apos;SignatureVersion&apos;  : &apos;1.0&apos;, \\\n            &apos;SignatureMethod&apos;   : &apos;HMAC-SHA1&apos;, \\\n            &apos;SignatureNonce&apos;    : str(uuid.uuid1()), \\\n            &apos;TimeStamp&apos;         : timestamp, \\\n    }\n\n    for key in user_params.keys():\n        parameters[key] = user_params[key]\n\n    signature = compute_signature(parameters, access_key_secret)\n    parameters[&apos;Signature&apos;] = signature\n    url = cdn_server_address + &quot;/?&quot; + urllib.urlencode(parameters)\n    return url\n\ndef make_request(user_params, quiet=False):\n    url = compose_url(user_params)\n    r = requests.get(url)\n    print(r.content)\n\ndef configure_accesskeypair(args, options):\n    if options.accesskeyid is None or options.accesskeysecret is None:\n        print(&quot;config miss parameters, use --id=[accesskeyid] --secret=[accesskeysecret]&quot;)\n        sys.exit(1)\n    config = ConfigParser.RawConfigParser()\n    config.add_section(CONFIGSECTION)\n    config.set(CONFIGSECTION, &apos;accesskeyid&apos;, options.accesskeyid)\n    config.set(CONFIGSECTION, &apos;accesskeysecret&apos;, options.accesskeysecret)\n    cfgfile = open(CONFIGFILE, &apos;w+&apos;)\n    config.write(cfgfile)\n    cfgfile.close()\n\ndef setup_credentials():\n    config = ConfigParser.ConfigParser()\n    try:\n        config.read(CONFIGFILE)\n        global access_key_id\n        global access_key_secret\n        access_key_id = config.get(CONFIGSECTION, &apos;accesskeyid&apos;)\n        access_key_secret = config.get(CONFIGSECTION, &apos;accesskeysecret&apos;)\n    except Exception, e:\n        print traceback.format_exc()\n        print(&quot;can&apos;t get access key pair, use config --id=[accesskeyid] --secret=[accesskeysecret] to setup&quot;)\n        sys.exit(1)\n</code></pre></li>\n</ol>\n<pre><code>if __name__ == &apos;__main__&apos;:\n    parser = OptionParser(&quot;%s Action=action Param1=Value1 Param2=Value2\\n&quot; % sys.argv[0])\n    parser.add_option(&quot;-i&quot;, &quot;--id&quot;, dest=&quot;accesskeyid&quot;, help=&quot;specify access key id&quot;)\n    parser.add_option(&quot;-s&quot;, &quot;--secret&quot;, dest=&quot;accesskeysecret&quot;, help=&quot;specify access key secret&quot;)\n\n    (options, args) = parser.parse_args()\n    if len(args) &lt; 1:\n        parser.print_help()\n        sys.exit(0)\n\n    if args[0] == &apos;help&apos;:\n        print cmdlist\n        sys.exit(0)\n    if args[0] != &apos;config&apos;:\n        setup_credentials()\n    else: #it&apos;s a configure id/secret command\n        configure_accesskeypair(args, options)\n        sys.exit(0)\n\n    user_params = {}\n    idx = 1\n    if not sys.argv[1].lower().startswith(&apos;action=&apos;):\n        user_params[&apos;action&apos;] = sys.argv[1]\n        idx = 2\n\n    for arg in sys.argv[idx:]:\n        try:\n            key, value = arg.split(&apos;=&apos;)\n            user_params[key.strip()] = value\n        except ValueError, e:\n            print(e.read().strip())\n            raise SystemExit(e)\n    make_request(user_params)\n</code></pre><ol>\n<li><p>创建配置文件aliyun.init</p>\n<pre><code>[Credentials]\naccesskeyid = LTAIowA8PvCJxEA8\naccesskeysecret = 2bHXbmggon6ng6hJzLNaSkLKbIdzPe\n</code></pre></li>\n<li>创建发布文件incremental_upload_to_aliyun_oss.py,这个代码就自己写了哈</li>\n<li><p>创建脚本publish.bat</p>\n<pre><code>python incremental_upload_to_aliyun_oss.py\n\npython cdn.py Action=RefreshObjectCaches ObjectType=File ObjectPath=你的域名\n\n@pause\n</code></pre></li>\n</ol>\n<p>注意：必须安装Python哟</p>\n","site":{"data":{}},"excerpt":"<p>oss对象存储用来搭建个人博客是我同事告诉我的，比较适合前端用，写点笔记。hexo部署到oss有一个注意的点就是oss不能使用相对路径进行访问（是用来存储的），比如访问a.com\\b\\并不会访问到其页面内容，需要在路径后面加上index.html.<br>","more":"</p>\n<ol>\n<li><p>在hexo默认配置文件中找到permalink参数，在其后面加上index.html</p>\n<p> permalink: :year/:month/:day/:title/index.html</p>\n</li>\n<li><p>随意找个文件位置，创建文件oss_config.json</p>\n<pre><code>{\n  &quot;accessKeyId&quot;: &quot;&quot;,\n  &quot;accessKeySecret&quot;: &quot;&quot;,\n  &quot;endpoint&quot;: &quot;oss-cn-shanghai.aliyuncs.com&quot;,\n  &quot;bucketName&quot;: &quot;djllhs&quot;,\n  &quot;ossDomain&quot;: &quot;djllhs.oss-cn-shanghai.aliyuncs.com&quot;,\n  &quot;localDir&quot;: &quot;E:/DJling resource/djl/public/&quot;\n}\n</code></pre></li>\n</ol>\n<ul>\n<li><p>accessKeyId和accessKeySecret是在阿里云上生成的，鼠标移入个人的名称就会显示accesskeys的图标，点击，按照提示操作即可。没有就创建。将对应的accessKeyId和accessKeySecret填入对应的字段</p>\n<p>  <img src=\"/images/1.png\" alt=\"alt text\"></p>\n</li>\n<li><p>从左侧导航中找到对象存储oss，点击进入概览，点击你的域名，进入Bucket概览页，找到下方的oss外网域名，复制到对应的字段ossDomain。鼠标移上去，点击显示的EndPoint。进入到访问域名和数据中心，找到你所在的地区，复制外网EndPoint到对应的字段endpoint</p>\n<p>  <img src=\"/images/2.png\" alt=\"alt text\"></p>\n<p>  <img src=\"/images/3.png\" alt=\"alt text\"></p>\n<p>  <img src=\"/images/4.png\" alt=\"alt text\"></p>\n</li>\n<li><p>bucketName即为你的Bucket概览的名字</p>\n<p>  <img src=\"/images/5.png\" alt=\"alt text\"></p>\n</li>\n<li><p>localDir的值为你的hexo博客的public的路径，如：E:/DJling resource/djl/public/</p>\n</li>\n</ul>\n<ol>\n<li><p>创建cdn.py,cdn的官方文档，用来刷新的，可去查阅</p>\n<pre><code>#!/usr/bin/python\n# -*- coding:utf-8 -*-\n\nimport sys,os\nimport urllib, urllib2\nimport base64\nimport hmac\nimport hashlib\nfrom hashlib import sha1\nimport time\nimport uuid\nimport json\nfrom optparse import OptionParser\nimport ConfigParser\nimport traceback\nimport requests\n\naccess_key_id = &apos;&apos;;\naccess_key_secret = &apos;&apos;;\ncdn_server_address = &apos;https://cdn.aliyuncs.com&apos;\nCONFIGFILE = os.getcwd() + &apos;/aliyun.ini&apos;\nCONFIGSECTION = &apos;Credentials&apos;\ncmdlist = &apos;&apos;&apos;\n接口说明请参照pdf文档\n&apos;&apos;&apos;\n\ndef percent_encode(str):\n    res = urllib.quote(str.decode(sys.stdin.encoding).encode(&apos;utf8&apos;), &apos;&apos;)\n    res = res.replace(&apos;+&apos;, &apos;%20&apos;)\n    res = res.replace(&apos;*&apos;, &apos;%2A&apos;)\n    res = res.replace(&apos;%7E&apos;, &apos;~&apos;)\n    return res\n\ndef compute_signature(parameters, access_key_secret):\n    sortedParameters = sorted(parameters.items(), key=lambda parameters: parameters[0])\n\n    canonicalizedQueryString = &apos;&apos;\n    for (k,v) in sortedParameters:\n        canonicalizedQueryString += &apos;&amp;&apos; + percent_encode(k) + &apos;=&apos; + percent_encode(v)\n\n    stringToSign = &apos;GET&amp;%2F&amp;&apos; + percent_encode(canonicalizedQueryString[1:])\n\n    h = hmac.new(access_key_secret + &quot;&amp;&quot;, stringToSign, sha1)\n    signature = base64.encodestring(h.digest()).strip()\n    return signature\n\ndef compose_url(user_params):\n    timestamp = time.strftime(&quot;%Y-%m-%dT%H:%M:%SZ&quot;, time.gmtime())\n\n    parameters = { \\\n            &apos;Format&apos;        : &apos;JSON&apos;, \\\n            &apos;Version&apos;       : &apos;2014-11-11&apos;, \\\n            &apos;AccessKeyId&apos;   : access_key_id, \\\n            &apos;SignatureVersion&apos;  : &apos;1.0&apos;, \\\n            &apos;SignatureMethod&apos;   : &apos;HMAC-SHA1&apos;, \\\n            &apos;SignatureNonce&apos;    : str(uuid.uuid1()), \\\n            &apos;TimeStamp&apos;         : timestamp, \\\n    }\n\n    for key in user_params.keys():\n        parameters[key] = user_params[key]\n\n    signature = compute_signature(parameters, access_key_secret)\n    parameters[&apos;Signature&apos;] = signature\n    url = cdn_server_address + &quot;/?&quot; + urllib.urlencode(parameters)\n    return url\n\ndef make_request(user_params, quiet=False):\n    url = compose_url(user_params)\n    r = requests.get(url)\n    print(r.content)\n\ndef configure_accesskeypair(args, options):\n    if options.accesskeyid is None or options.accesskeysecret is None:\n        print(&quot;config miss parameters, use --id=[accesskeyid] --secret=[accesskeysecret]&quot;)\n        sys.exit(1)\n    config = ConfigParser.RawConfigParser()\n    config.add_section(CONFIGSECTION)\n    config.set(CONFIGSECTION, &apos;accesskeyid&apos;, options.accesskeyid)\n    config.set(CONFIGSECTION, &apos;accesskeysecret&apos;, options.accesskeysecret)\n    cfgfile = open(CONFIGFILE, &apos;w+&apos;)\n    config.write(cfgfile)\n    cfgfile.close()\n\ndef setup_credentials():\n    config = ConfigParser.ConfigParser()\n    try:\n        config.read(CONFIGFILE)\n        global access_key_id\n        global access_key_secret\n        access_key_id = config.get(CONFIGSECTION, &apos;accesskeyid&apos;)\n        access_key_secret = config.get(CONFIGSECTION, &apos;accesskeysecret&apos;)\n    except Exception, e:\n        print traceback.format_exc()\n        print(&quot;can&apos;t get access key pair, use config --id=[accesskeyid] --secret=[accesskeysecret] to setup&quot;)\n        sys.exit(1)\n</code></pre></li>\n</ol>\n<pre><code>if __name__ == &apos;__main__&apos;:\n    parser = OptionParser(&quot;%s Action=action Param1=Value1 Param2=Value2\\n&quot; % sys.argv[0])\n    parser.add_option(&quot;-i&quot;, &quot;--id&quot;, dest=&quot;accesskeyid&quot;, help=&quot;specify access key id&quot;)\n    parser.add_option(&quot;-s&quot;, &quot;--secret&quot;, dest=&quot;accesskeysecret&quot;, help=&quot;specify access key secret&quot;)\n\n    (options, args) = parser.parse_args()\n    if len(args) &lt; 1:\n        parser.print_help()\n        sys.exit(0)\n\n    if args[0] == &apos;help&apos;:\n        print cmdlist\n        sys.exit(0)\n    if args[0] != &apos;config&apos;:\n        setup_credentials()\n    else: #it&apos;s a configure id/secret command\n        configure_accesskeypair(args, options)\n        sys.exit(0)\n\n    user_params = {}\n    idx = 1\n    if not sys.argv[1].lower().startswith(&apos;action=&apos;):\n        user_params[&apos;action&apos;] = sys.argv[1]\n        idx = 2\n\n    for arg in sys.argv[idx:]:\n        try:\n            key, value = arg.split(&apos;=&apos;)\n            user_params[key.strip()] = value\n        except ValueError, e:\n            print(e.read().strip())\n            raise SystemExit(e)\n    make_request(user_params)\n</code></pre><ol>\n<li><p>创建配置文件aliyun.init</p>\n<pre><code>[Credentials]\naccesskeyid = LTAIowA8PvCJxEA8\naccesskeysecret = 2bHXbmggon6ng6hJzLNaSkLKbIdzPe\n</code></pre></li>\n<li>创建发布文件incremental_upload_to_aliyun_oss.py,这个代码就自己写了哈</li>\n<li><p>创建脚本publish.bat</p>\n<pre><code>python incremental_upload_to_aliyun_oss.py\n\npython cdn.py Action=RefreshObjectCaches ObjectType=File ObjectPath=你的域名\n\n@pause\n</code></pre></li>\n</ol>\n<p>注意：必须安装Python哟</p>"},{"title":"阅读《编写维护的javascript》一书简要笔记","_content":"任何语言都需要强调编码风格的一致性。增强代码的可读性，可维护性是相当重要的。本书讲述的技巧和技术比较实用。\n<!-- more -->\n\n一、基本的格式化\n-------------------------------------\n1. 代码缩进，建议4个空格字符为一个缩进层次，或使用tab缩进（一般编辑器默认为4个空格）；\n2. 语句结尾，建议不要省略分号；\n3. 行的长度，建议不超过80个字符；\n4. 换行，通常在运算符后换行，下一行会增加两个层级的缩进。例外，当给变量赋值时，第二行的位置应当和赋值运算符的位置保持对齐；\n5. 空行\n    * 在方法之间。\n    * 在方法中的局部变量和第一条语句之间。\n    * 在多行或单行注释之前。\n    * 在方法内的逻辑片段之间插入空行。\n6. 命名，通常采用驼峰式命名。\n    * 变量名，驼峰命名，前缀为名词，如myName。\n    * 函数和方法名，驼峰命名，前缀为动词，如isEnabled\n    * 常量，使用大写字母和下划线来命名，下划线用以分隔单词，如MAX_COUNT。\n    * 构造函数，大驼峰命名，常为名词（前面一般会有new运算符），如Person。\n    * 直接量，\n       * 字符串，双引号或单引号括起来，多行时，使用 + 连接；\n       * 数字，禁止八进制直接量；\n       * null，可看成对象的占位符。\n       *　undefined，禁止使用特殊值undefined，可有效地确保只有一种情况下typeof才会返回”undefined“；当变量未声明时，若使用了一个可能赋值为一个对象的变量事，将其赋值为null。\n       * 对象直接量，直接将所有的属性写在花括号里。\n       * 数组直接量，使用方括号将数组初始元素括起来。\n       * 对象直接量，直接将所有的属性写在花括号里。\n       * 数组直接量，使用方括号将数组初始元素括起来。\n\n二、注释\n-------------------------\n1. 单行注释，// 这是单行注释。 （三种使用方式）\n   * 独占一行，解释下一行代码。这行注释之前总有一个空行，且缩进和下一行代码保持一致。\n   * 在代码行的尾部，代码结束到注释之间至少有一个缩进。注：代码及注释不应超过单行最大字符数限制，若超过，则将注释提于代码行上方。\n   * 注释大段代码\n2. 多行注释，以斜杠加星号开头，星号加斜杠结束。总在代码段之前，注释和代码之间没有空行间隔。多行注释前应有空行，且缩进和要描述的代码一致。\n3. 使用注释，一般原则是在需要让代码变得更清晰时添加注释。\n   * 代码难于理解时使用。\n   * 代码可能被文认为是错误的时使用。     \n   * 代码为浏览器特性hack时使用。\n4. 文档注释，以斜杠加两个星号开头，接下来是描述信息，其中使用@符号来表示一个或多个属性。使用时，应该确保对如下内容添加注释。\n   * 所有的方法，应当对方法、期望的参数和可能的返回值添加注释描述。\n   * 所有的构造函数，应当对自定义类型和期望的参数添加注释描述。\n   * 所有包含文档化方法的对象，若一个对象包含一个或多个附带文档注释的方法，则也应适当地针对文档生成工具添加文档注释。\n\n三、语句和表达式\n-------------------------------\n1. 花括号的对齐方式：\n   * 左花括号放置在块语句中第一句代码的末尾（推荐）\n\n           if(condition) {\n               doSomething();\n           } else {\n               doSomething();\n           }\n\n   * 左花括号放置于块语句首行的下一行\n\n           if (condition)\n           {\n               doSomething();\n           }\n           else\n           {\n               doSomething();\n           }\n\n2. 块语句间隔\n   * 在语句名、圆括号和左花括号之间没有空格间隔。\n\n           if(condition){\n               doSomething();\n           }\n\n   * 在括左圆括号之前和右圆括号之后各加一个空格。(推荐)\n\n           if (condition) {\n               doSomething();\n           }\n\n   * 在左圆括号后和右圆括号前各添加一个空格。\n\n           if ( condition ) {\n               doSomething();\n           }\n\n3. switch语句\n   * 缩进：\n       * 每条case语句相对于switch关键字都缩进一个层级\n       * 从第二天case语句开始，每条case语句前后各有一个空行\n   * case语句的“连续执行”，即case语句结束后不添加break之类的结尾。 只要加上合适的注释，是可以不加结尾的。\n\n4. for循环\n   * 使用break可立即退出循环\n   * 使用continue可立即退出本次循环\n\n5. for-in循环，遍历对象属性，返回属性名，不应该遍历数组。使用hasOwnProperty（）过滤出实例属性\n\n四、变量、函数和运算符\n----------------------------\n1. 变量声明\n   * 局部变量放在函数首顶部\n   * 使用单var语句\n\n2. 函数声明\n   * 先声明后使用函数\n   * 函数声明应当在条件语句外部使用\n\n3. 函数调用间隔\n   * 左括号之后和右括号之前加上空格\n\n           doSomething(function() {});\n           doSomething({ item: item });\n           doSomething([ item ]);\n           doSomething('hi');\n\n4. 立即调用的函数 将函数用圆括号包裹起来\n\n           var value = (function() {\n               // 函数体\n               return {\n                   messgae: 'hi'\n               }\n           }());\n\n5. 严格模式 'use strict'\n   * 不用在全局作用域\n   * 多个函数应用严格模式可使用立即执行的函数\n\n\n           (function() {\n               'use strict';\n               function doSomething() {\n\n               }\n               function doSomethingElse() {\n\n               }\n           })\n\n6. 相等 推荐用 === 和 !== ,不涉及强转\n\n五、UI层的松耦合\n-------------------------\n1. 松耦合：修改一个组件而不需要更改其他组件\n2. 将JavaScript从css中抽离（避免使用css表达式）\n3. 将css从JavaScript中抽离（不应当直接操作样式）\n4. 将JavaScript从HTML中抽离（最好将所有的JavaScript代码都放入外置文件中）\n5. 将HTML从JavaScript中抽离\n   * 从服务器加载，即将模板放置于远程服务器（大量），少量的标签可采用客户端模板\n   * 简单客户端模板，一些带“插槽”的标签片段，注释是和元素及文本一样的DOM节点；将模板数据嵌入到HTML页面里的第二个方法是使用一个带有自定义type属性的<script>元素\n   * 复杂客户端模板，如Handlebars。\n\n六、避免使用全局变量\n----------------------\n1. 全局变量带来的问题\n   * 命名冲突\n   * 代码的脆弱性，当定义函数时，最好尽可能多的将数据置于局部作用域内\n   * 难以测试，确保函数不会对全部变量有依赖，增强代码的可测性\n\n2. 意外的全局变量\n   * 总是使用var来定义变量，哪怕是定义全部变量\n   * 给未声明的变量赋值，使用工具时会报警告。严格模式下会报错\n\n3. 单全局变量方式， 最佳方法是依赖尽可能少的全局变量，即只创建一个全局变量。如jQuery\n   * 命名空间，将功能按照命名空间进行分组\n   * 模块，一种通用的功能片段，如YUI，AMD等。使用AMD，需要模块加载器，如Dojs，RequireJs\n\n4. 零全局变量， 使用一个立即执行的函数调用并将所有脚本放入其中\n\n七、事件处理\n-----------------------------\n1. 隔离应用逻辑，将应用逻辑和事件处理的代码拆分开来\n2. 不要分发事件对象，最好让时间处理程序成为杰出到event对象的唯一函数。事件处理程序应当在进入应用逻辑之前针对event对象执行任何必要的操作，包括阻止默认事件或阻止事件冒泡，都应当直接包含在事件处理程序中\n\n八、避免“空比较”\n---------------------------------\n1. 检测原始值,使用typeof\n   * 字符串，返回“string”\n   * 数字，返回“number”\n   * 布尔值，返回“boolean”\n   * undefined，返回“undefined”\n2. 检测引用值（对象），Object、Array、Date、Error,使用instanceof，语法 value instanceof constructor。 不仅检测构造这个对象的构造器，还检测原型链，也可检测自定义的类型。但是不检测函数和数组\n3. 检测函数，使用typeof，返回“function”。在IE8和更早版本的IE浏览器中，检测DOM节点，返回“Object”（可用in）\n\n       if(\"querySelectorAll\" in document){\n           //代码块\n       }\n4. 检测数组\n\n\n       function isArray(value) {\n           return Object.prototype.toString.call(value) === \"[object Array]\";\n       }\n\n5. 检测属性，使用in，如果实例对象的属性存在、或者继承自对象的原型，dou返回true。若检测实例对象的某个属性时候存在，用hasOwnProperty（）方法。在IE8以及更早版本，DOM对象并非继承自Object。\n\n\n       //、如果沟不确定是否为DOM对象\n       if(\"hasOwnProperty\" in Object && Object.hasOwnProperty('related')){\n           // 代码块\n       }\n九、将配置数据从代码中分离出来\n-----------------------------\n1. 配置数据，是应用中写死的值，如URL，需要展现给用户的字符串，重复的值，设置（比如每页的配置项），任何可能发生变更的值\n2. 抽离配置数据， 即将配置数据拿到外部\n3. 保存配置数据， 放在单独的文件中。存储数据方式，\n   * JSON 文件\n\n\n           {\n               \"MSG_INVALID_VALUE\": \"Invalid value\",\n               \"URL_INVAILID\": \"/errors/invalid.php\",    \n               \"CSS_SELECTED\": \"selected\"\n           }\n\n   * JSONP, 将JSON结构用一个函数包装起来\n\n           myFunc({\n               \"MSG_INVALID_VALUE\": \"Invalid value\",\n               \"URL_INVAILID\": \"/errors/invalid.php\",    \n               \"CSS_SELECTED\": \"selected\"\n           })\n\n   * 纯JavaScript，将JSON对象赋值为一个变量，这个变量会被程序用到\n\n           var config = {\n               \"MSG_INVALID_VALUE\": \"Invalid value\",\n               \"URL_INVAILID\": \"/errors/invalid.php\",    \n               \"CSS_SELECTED\": \"selected\"\n           }\n\n十、抛出自定义错误\n-----------------------\n1. 在js中抛出错误，Error对象\n       throw new Error(\"Something bad happened\")\n\n   注：没有通过try-catch语句捕获，抛出任何值都将引发一个错误\n\n2. 抛出错误的好处，能够明确问题所在。推荐总是在错误消息中包含函数名称以及函数失败的原因\n3. 何时抛出错误，最佳地方在工具函数中。经验法则：\n   * 一旦修复了一个很难调试的额错误，尝试增加一两个自定义错误\n   * 如果正在写代码，思考一下：“我希望[某些事情]不会发生，如果发生，代码会一团糟”\n   * 若在编写别人的代码，思考一下其使用方式，在特定的情况下抛出错误\n4. try-catch语句。可能引发错误的代码放在try块中，处理错误的代码放在catch中。finally放一定会被执行的代码\n\n           try{\n               SomethingThatMightCauseAnError();\n           }catch(ex){\n               handleError(ex);\n           }finally{\n               continueDoingOtherStuff();\n           }\n\n\n5. 错误类型\n\n       Error  //所有错误的基本类型\n       EvalError  // 通过eval()函数执行代码发生错误时抛出\n       RangeError // 一个数字超出它的边界时抛出\n       ReferenceError // 期望的对象存在时抛出\n       SyntaxError // 给eval()函数传递的代码中有语法错误时抛出\n       TypeError  // 变量不是期望的类型时抛出\n       URIError // 给encodeURI()、encodeURIComponent()、decodeURI()或者decodeURIComponent()等函数传递格式非法的URI字符串时抛出\n\n十一、不是你的对象不要动\n-----------------------\n1. 什么是你的。若你的代码没有创建这些对象，不要修改它们。包括：\n   * 原生对象（Object、Array 等）\n   * DOM对象（如document）\n   * 浏览器对象模型（BOM）对象（例如，window）\n   * 类库的对象\n2. 原则\n   + 不覆盖方法\n\n           // 不好的写法\n           document._originalGetElementById = document.getElementById;\n           document.getElementById = function (id) {\n               if( id == 'window'){\n                   return window;\n               }else{\n                   return document._originalGetElementById(id);_\n               }\n           };\n\n\n   + 不新增方法\n\n\n           //不好的写法，在DOM对象上增加了方法\n           document.sayImAwesome = function() {\n               alert(\"You're awesome\");\n           }\n\n           // 不好的写法，在原生对象上增加了方法\n           Array.prototype.reverseSort = function() {\n               return this.sort().reverse();\n           }\n\n           // 不好的写法，在库对象上增加了方法\n           YUI.doSomething = function() {\n               // 代码\n           }\n\n\n   + 不删除方法，一是给对应的名字赋值为null，二是使用delete操作符在删除（如果在prototype的属性或方法上使用delete是不起作用的）\n3. 更好的途径，基于对象的继承和基于类型的继承\n   * 基于对象的继承，也叫原型继承，一个对象继承另外一个对象是不需要调用构造函数的。如ECMAScript5的Object.create()方法\n\n           var person = {\n               name: \"Bob\",\n               sayName: function(){\n                   console.log(this.name);\n               }\n           }\n           // 创建新对象 继承自person，可访问其属性和方法\n           var myPerson = Object.create(person);\n           myPerson.sayName();  // Bob\n\n           // 重新定义 myPerson.sayName，则切断对person.sayName的访问\n           myPerson.sayName = function(){\n               console.log('mom');\n           }\n           myPerson.sayName(); // mom\n           person.sayName(); // Bob\n\n           // Object.create()可指定第二个参数，该参数对象中的属性和方法将添加到新的对象中\n           var myPerson = Object.create(person,{\n               name: {\n                   value: 'Dad'\n               }\n           })\n           myPerson.sayName(); // Dad\n           person.sayName(); // Bob\n\n   * 基于类型的继承，通过构造函数实现，需要访问被继承对象的构造函数。需要两步：首先，原型继承；然后，构造器继承。构造器继承是调用超类的构造函数时传入新建的对象作为其this的值\n\n           function Person(name){\n               this.name;\n           }\n\n           function Author(name){\n               Person.call(this,name); // 构造器继承\n           }\n\n           Author.prototype = new Person();\n\n   * 门面模式，为一个已存在的对象创建一个新的接口。门面实现一个特定的接口，让一个对象看起来像另一个对象，就称作适配器。门面和适配器唯一的不同是前者创建新接口，后者实现已存在的接口\n\n           function DOMWrapper(ele){\n               this.ele = ele;\n           }\n\n           DOMWrapper.prototype.addClass = function(className){\n               ele.className += \" \" + className;\n           }\n\n           DOMWrapper.prototype.remove = function() {\n               this.ele.parentNode.removeChild(this.ele);\n           }\n\n           var wrapper = new DOMWrapper(document.getElementById('my-div'));\n           wrapper.addClass('selected');\n           wrapper.remove();\n\n4. 阻止修改，三种锁定修改的级别，每种都拥有两个方法：一个用来实施操作，一个用来检测是否应用了相应的操作\n   - 防止扩展，禁止为对象“添加”属性和方法，但已存在的属性和方法是可以被修改或删除\n\n           //Object.preventExtension(), Object.isExtensible()\n           var person = {\n               name: 'bob'\n           };\n           //锁定对象\n           Object.preventExtensions(person);\n           console.log(Object.isExtensible(person)); // false\n           person.age = 25; //正常情况悄悄的失败，除非在strict模式下抛出错误\n\n   - 密封，类似“防止扩展”，而且禁止为对象“删除”已存在的属性和方法\n\n           //Object.seal()密封对象,Object.isSealed()\n           Object.seal(person);\n           console.log(Object.isExtensible(person)); // false\n           console.log(Object.isSealed(person)); // true\n           delete person.name; // false 正常情况悄悄的失败，除非是在strict模式下抛出错误\n           person.age = 25;\n\n   - 冻结，类似“密封”，而且禁止为对象“删除”已存在的属性和方法（所有字段均为只读）\n\n           //Object.freeze()冻结，Object.isFrozen()\n           Object.freeze(person);\n           console.log(Object.isExtensible(person)); // false\n           console.log(Object.isSealed(person)); // true\n           console.log(Object.isFrozen(person)); // true\n           person.name = 'mom'; //\n           person.age = 25; //同上\n           delete person.name; //同上\n\n           // 被冻结的对象同时也是不可扩展和被密封的，故调用Object.isExtensible()返回false，调用Object.isSealed()返回true\n           // 被冻结的对象和被密封的对象最大的区别在于，前者禁止任何对已存在属性和方法的修改\n\n十二、浏览器嗅探\n---------------------------\n","source":"_posts/javascript standard.md","raw":"---\ntitle: 阅读《编写维护的javascript》一书简要笔记\n---\n任何语言都需要强调编码风格的一致性。增强代码的可读性，可维护性是相当重要的。本书讲述的技巧和技术比较实用。\n<!-- more -->\n\n一、基本的格式化\n-------------------------------------\n1. 代码缩进，建议4个空格字符为一个缩进层次，或使用tab缩进（一般编辑器默认为4个空格）；\n2. 语句结尾，建议不要省略分号；\n3. 行的长度，建议不超过80个字符；\n4. 换行，通常在运算符后换行，下一行会增加两个层级的缩进。例外，当给变量赋值时，第二行的位置应当和赋值运算符的位置保持对齐；\n5. 空行\n    * 在方法之间。\n    * 在方法中的局部变量和第一条语句之间。\n    * 在多行或单行注释之前。\n    * 在方法内的逻辑片段之间插入空行。\n6. 命名，通常采用驼峰式命名。\n    * 变量名，驼峰命名，前缀为名词，如myName。\n    * 函数和方法名，驼峰命名，前缀为动词，如isEnabled\n    * 常量，使用大写字母和下划线来命名，下划线用以分隔单词，如MAX_COUNT。\n    * 构造函数，大驼峰命名，常为名词（前面一般会有new运算符），如Person。\n    * 直接量，\n       * 字符串，双引号或单引号括起来，多行时，使用 + 连接；\n       * 数字，禁止八进制直接量；\n       * null，可看成对象的占位符。\n       *　undefined，禁止使用特殊值undefined，可有效地确保只有一种情况下typeof才会返回”undefined“；当变量未声明时，若使用了一个可能赋值为一个对象的变量事，将其赋值为null。\n       * 对象直接量，直接将所有的属性写在花括号里。\n       * 数组直接量，使用方括号将数组初始元素括起来。\n       * 对象直接量，直接将所有的属性写在花括号里。\n       * 数组直接量，使用方括号将数组初始元素括起来。\n\n二、注释\n-------------------------\n1. 单行注释，// 这是单行注释。 （三种使用方式）\n   * 独占一行，解释下一行代码。这行注释之前总有一个空行，且缩进和下一行代码保持一致。\n   * 在代码行的尾部，代码结束到注释之间至少有一个缩进。注：代码及注释不应超过单行最大字符数限制，若超过，则将注释提于代码行上方。\n   * 注释大段代码\n2. 多行注释，以斜杠加星号开头，星号加斜杠结束。总在代码段之前，注释和代码之间没有空行间隔。多行注释前应有空行，且缩进和要描述的代码一致。\n3. 使用注释，一般原则是在需要让代码变得更清晰时添加注释。\n   * 代码难于理解时使用。\n   * 代码可能被文认为是错误的时使用。     \n   * 代码为浏览器特性hack时使用。\n4. 文档注释，以斜杠加两个星号开头，接下来是描述信息，其中使用@符号来表示一个或多个属性。使用时，应该确保对如下内容添加注释。\n   * 所有的方法，应当对方法、期望的参数和可能的返回值添加注释描述。\n   * 所有的构造函数，应当对自定义类型和期望的参数添加注释描述。\n   * 所有包含文档化方法的对象，若一个对象包含一个或多个附带文档注释的方法，则也应适当地针对文档生成工具添加文档注释。\n\n三、语句和表达式\n-------------------------------\n1. 花括号的对齐方式：\n   * 左花括号放置在块语句中第一句代码的末尾（推荐）\n\n           if(condition) {\n               doSomething();\n           } else {\n               doSomething();\n           }\n\n   * 左花括号放置于块语句首行的下一行\n\n           if (condition)\n           {\n               doSomething();\n           }\n           else\n           {\n               doSomething();\n           }\n\n2. 块语句间隔\n   * 在语句名、圆括号和左花括号之间没有空格间隔。\n\n           if(condition){\n               doSomething();\n           }\n\n   * 在括左圆括号之前和右圆括号之后各加一个空格。(推荐)\n\n           if (condition) {\n               doSomething();\n           }\n\n   * 在左圆括号后和右圆括号前各添加一个空格。\n\n           if ( condition ) {\n               doSomething();\n           }\n\n3. switch语句\n   * 缩进：\n       * 每条case语句相对于switch关键字都缩进一个层级\n       * 从第二天case语句开始，每条case语句前后各有一个空行\n   * case语句的“连续执行”，即case语句结束后不添加break之类的结尾。 只要加上合适的注释，是可以不加结尾的。\n\n4. for循环\n   * 使用break可立即退出循环\n   * 使用continue可立即退出本次循环\n\n5. for-in循环，遍历对象属性，返回属性名，不应该遍历数组。使用hasOwnProperty（）过滤出实例属性\n\n四、变量、函数和运算符\n----------------------------\n1. 变量声明\n   * 局部变量放在函数首顶部\n   * 使用单var语句\n\n2. 函数声明\n   * 先声明后使用函数\n   * 函数声明应当在条件语句外部使用\n\n3. 函数调用间隔\n   * 左括号之后和右括号之前加上空格\n\n           doSomething(function() {});\n           doSomething({ item: item });\n           doSomething([ item ]);\n           doSomething('hi');\n\n4. 立即调用的函数 将函数用圆括号包裹起来\n\n           var value = (function() {\n               // 函数体\n               return {\n                   messgae: 'hi'\n               }\n           }());\n\n5. 严格模式 'use strict'\n   * 不用在全局作用域\n   * 多个函数应用严格模式可使用立即执行的函数\n\n\n           (function() {\n               'use strict';\n               function doSomething() {\n\n               }\n               function doSomethingElse() {\n\n               }\n           })\n\n6. 相等 推荐用 === 和 !== ,不涉及强转\n\n五、UI层的松耦合\n-------------------------\n1. 松耦合：修改一个组件而不需要更改其他组件\n2. 将JavaScript从css中抽离（避免使用css表达式）\n3. 将css从JavaScript中抽离（不应当直接操作样式）\n4. 将JavaScript从HTML中抽离（最好将所有的JavaScript代码都放入外置文件中）\n5. 将HTML从JavaScript中抽离\n   * 从服务器加载，即将模板放置于远程服务器（大量），少量的标签可采用客户端模板\n   * 简单客户端模板，一些带“插槽”的标签片段，注释是和元素及文本一样的DOM节点；将模板数据嵌入到HTML页面里的第二个方法是使用一个带有自定义type属性的<script>元素\n   * 复杂客户端模板，如Handlebars。\n\n六、避免使用全局变量\n----------------------\n1. 全局变量带来的问题\n   * 命名冲突\n   * 代码的脆弱性，当定义函数时，最好尽可能多的将数据置于局部作用域内\n   * 难以测试，确保函数不会对全部变量有依赖，增强代码的可测性\n\n2. 意外的全局变量\n   * 总是使用var来定义变量，哪怕是定义全部变量\n   * 给未声明的变量赋值，使用工具时会报警告。严格模式下会报错\n\n3. 单全局变量方式， 最佳方法是依赖尽可能少的全局变量，即只创建一个全局变量。如jQuery\n   * 命名空间，将功能按照命名空间进行分组\n   * 模块，一种通用的功能片段，如YUI，AMD等。使用AMD，需要模块加载器，如Dojs，RequireJs\n\n4. 零全局变量， 使用一个立即执行的函数调用并将所有脚本放入其中\n\n七、事件处理\n-----------------------------\n1. 隔离应用逻辑，将应用逻辑和事件处理的代码拆分开来\n2. 不要分发事件对象，最好让时间处理程序成为杰出到event对象的唯一函数。事件处理程序应当在进入应用逻辑之前针对event对象执行任何必要的操作，包括阻止默认事件或阻止事件冒泡，都应当直接包含在事件处理程序中\n\n八、避免“空比较”\n---------------------------------\n1. 检测原始值,使用typeof\n   * 字符串，返回“string”\n   * 数字，返回“number”\n   * 布尔值，返回“boolean”\n   * undefined，返回“undefined”\n2. 检测引用值（对象），Object、Array、Date、Error,使用instanceof，语法 value instanceof constructor。 不仅检测构造这个对象的构造器，还检测原型链，也可检测自定义的类型。但是不检测函数和数组\n3. 检测函数，使用typeof，返回“function”。在IE8和更早版本的IE浏览器中，检测DOM节点，返回“Object”（可用in）\n\n       if(\"querySelectorAll\" in document){\n           //代码块\n       }\n4. 检测数组\n\n\n       function isArray(value) {\n           return Object.prototype.toString.call(value) === \"[object Array]\";\n       }\n\n5. 检测属性，使用in，如果实例对象的属性存在、或者继承自对象的原型，dou返回true。若检测实例对象的某个属性时候存在，用hasOwnProperty（）方法。在IE8以及更早版本，DOM对象并非继承自Object。\n\n\n       //、如果沟不确定是否为DOM对象\n       if(\"hasOwnProperty\" in Object && Object.hasOwnProperty('related')){\n           // 代码块\n       }\n九、将配置数据从代码中分离出来\n-----------------------------\n1. 配置数据，是应用中写死的值，如URL，需要展现给用户的字符串，重复的值，设置（比如每页的配置项），任何可能发生变更的值\n2. 抽离配置数据， 即将配置数据拿到外部\n3. 保存配置数据， 放在单独的文件中。存储数据方式，\n   * JSON 文件\n\n\n           {\n               \"MSG_INVALID_VALUE\": \"Invalid value\",\n               \"URL_INVAILID\": \"/errors/invalid.php\",    \n               \"CSS_SELECTED\": \"selected\"\n           }\n\n   * JSONP, 将JSON结构用一个函数包装起来\n\n           myFunc({\n               \"MSG_INVALID_VALUE\": \"Invalid value\",\n               \"URL_INVAILID\": \"/errors/invalid.php\",    \n               \"CSS_SELECTED\": \"selected\"\n           })\n\n   * 纯JavaScript，将JSON对象赋值为一个变量，这个变量会被程序用到\n\n           var config = {\n               \"MSG_INVALID_VALUE\": \"Invalid value\",\n               \"URL_INVAILID\": \"/errors/invalid.php\",    \n               \"CSS_SELECTED\": \"selected\"\n           }\n\n十、抛出自定义错误\n-----------------------\n1. 在js中抛出错误，Error对象\n       throw new Error(\"Something bad happened\")\n\n   注：没有通过try-catch语句捕获，抛出任何值都将引发一个错误\n\n2. 抛出错误的好处，能够明确问题所在。推荐总是在错误消息中包含函数名称以及函数失败的原因\n3. 何时抛出错误，最佳地方在工具函数中。经验法则：\n   * 一旦修复了一个很难调试的额错误，尝试增加一两个自定义错误\n   * 如果正在写代码，思考一下：“我希望[某些事情]不会发生，如果发生，代码会一团糟”\n   * 若在编写别人的代码，思考一下其使用方式，在特定的情况下抛出错误\n4. try-catch语句。可能引发错误的代码放在try块中，处理错误的代码放在catch中。finally放一定会被执行的代码\n\n           try{\n               SomethingThatMightCauseAnError();\n           }catch(ex){\n               handleError(ex);\n           }finally{\n               continueDoingOtherStuff();\n           }\n\n\n5. 错误类型\n\n       Error  //所有错误的基本类型\n       EvalError  // 通过eval()函数执行代码发生错误时抛出\n       RangeError // 一个数字超出它的边界时抛出\n       ReferenceError // 期望的对象存在时抛出\n       SyntaxError // 给eval()函数传递的代码中有语法错误时抛出\n       TypeError  // 变量不是期望的类型时抛出\n       URIError // 给encodeURI()、encodeURIComponent()、decodeURI()或者decodeURIComponent()等函数传递格式非法的URI字符串时抛出\n\n十一、不是你的对象不要动\n-----------------------\n1. 什么是你的。若你的代码没有创建这些对象，不要修改它们。包括：\n   * 原生对象（Object、Array 等）\n   * DOM对象（如document）\n   * 浏览器对象模型（BOM）对象（例如，window）\n   * 类库的对象\n2. 原则\n   + 不覆盖方法\n\n           // 不好的写法\n           document._originalGetElementById = document.getElementById;\n           document.getElementById = function (id) {\n               if( id == 'window'){\n                   return window;\n               }else{\n                   return document._originalGetElementById(id);_\n               }\n           };\n\n\n   + 不新增方法\n\n\n           //不好的写法，在DOM对象上增加了方法\n           document.sayImAwesome = function() {\n               alert(\"You're awesome\");\n           }\n\n           // 不好的写法，在原生对象上增加了方法\n           Array.prototype.reverseSort = function() {\n               return this.sort().reverse();\n           }\n\n           // 不好的写法，在库对象上增加了方法\n           YUI.doSomething = function() {\n               // 代码\n           }\n\n\n   + 不删除方法，一是给对应的名字赋值为null，二是使用delete操作符在删除（如果在prototype的属性或方法上使用delete是不起作用的）\n3. 更好的途径，基于对象的继承和基于类型的继承\n   * 基于对象的继承，也叫原型继承，一个对象继承另外一个对象是不需要调用构造函数的。如ECMAScript5的Object.create()方法\n\n           var person = {\n               name: \"Bob\",\n               sayName: function(){\n                   console.log(this.name);\n               }\n           }\n           // 创建新对象 继承自person，可访问其属性和方法\n           var myPerson = Object.create(person);\n           myPerson.sayName();  // Bob\n\n           // 重新定义 myPerson.sayName，则切断对person.sayName的访问\n           myPerson.sayName = function(){\n               console.log('mom');\n           }\n           myPerson.sayName(); // mom\n           person.sayName(); // Bob\n\n           // Object.create()可指定第二个参数，该参数对象中的属性和方法将添加到新的对象中\n           var myPerson = Object.create(person,{\n               name: {\n                   value: 'Dad'\n               }\n           })\n           myPerson.sayName(); // Dad\n           person.sayName(); // Bob\n\n   * 基于类型的继承，通过构造函数实现，需要访问被继承对象的构造函数。需要两步：首先，原型继承；然后，构造器继承。构造器继承是调用超类的构造函数时传入新建的对象作为其this的值\n\n           function Person(name){\n               this.name;\n           }\n\n           function Author(name){\n               Person.call(this,name); // 构造器继承\n           }\n\n           Author.prototype = new Person();\n\n   * 门面模式，为一个已存在的对象创建一个新的接口。门面实现一个特定的接口，让一个对象看起来像另一个对象，就称作适配器。门面和适配器唯一的不同是前者创建新接口，后者实现已存在的接口\n\n           function DOMWrapper(ele){\n               this.ele = ele;\n           }\n\n           DOMWrapper.prototype.addClass = function(className){\n               ele.className += \" \" + className;\n           }\n\n           DOMWrapper.prototype.remove = function() {\n               this.ele.parentNode.removeChild(this.ele);\n           }\n\n           var wrapper = new DOMWrapper(document.getElementById('my-div'));\n           wrapper.addClass('selected');\n           wrapper.remove();\n\n4. 阻止修改，三种锁定修改的级别，每种都拥有两个方法：一个用来实施操作，一个用来检测是否应用了相应的操作\n   - 防止扩展，禁止为对象“添加”属性和方法，但已存在的属性和方法是可以被修改或删除\n\n           //Object.preventExtension(), Object.isExtensible()\n           var person = {\n               name: 'bob'\n           };\n           //锁定对象\n           Object.preventExtensions(person);\n           console.log(Object.isExtensible(person)); // false\n           person.age = 25; //正常情况悄悄的失败，除非在strict模式下抛出错误\n\n   - 密封，类似“防止扩展”，而且禁止为对象“删除”已存在的属性和方法\n\n           //Object.seal()密封对象,Object.isSealed()\n           Object.seal(person);\n           console.log(Object.isExtensible(person)); // false\n           console.log(Object.isSealed(person)); // true\n           delete person.name; // false 正常情况悄悄的失败，除非是在strict模式下抛出错误\n           person.age = 25;\n\n   - 冻结，类似“密封”，而且禁止为对象“删除”已存在的属性和方法（所有字段均为只读）\n\n           //Object.freeze()冻结，Object.isFrozen()\n           Object.freeze(person);\n           console.log(Object.isExtensible(person)); // false\n           console.log(Object.isSealed(person)); // true\n           console.log(Object.isFrozen(person)); // true\n           person.name = 'mom'; //\n           person.age = 25; //同上\n           delete person.name; //同上\n\n           // 被冻结的对象同时也是不可扩展和被密封的，故调用Object.isExtensible()返回false，调用Object.isSealed()返回true\n           // 被冻结的对象和被密封的对象最大的区别在于，前者禁止任何对已存在属性和方法的修改\n\n十二、浏览器嗅探\n---------------------------\n","slug":"javascript standard","published":1,"date":"2017-05-26T07:12:36.604Z","updated":"2017-05-25T08:05:02.227Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj35px5nd0003x8de6xf890bi","content":"<p>任何语言都需要强调编码风格的一致性。增强代码的可读性，可维护性是相当重要的。本书讲述的技巧和技术比较实用。<br><a id=\"more\"></a></p>\n<h2 id=\"一、基本的格式化\"><a href=\"#一、基本的格式化\" class=\"headerlink\" title=\"一、基本的格式化\"></a>一、基本的格式化</h2><ol>\n<li>代码缩进，建议4个空格字符为一个缩进层次，或使用tab缩进（一般编辑器默认为4个空格）；</li>\n<li>语句结尾，建议不要省略分号；</li>\n<li>行的长度，建议不超过80个字符；</li>\n<li>换行，通常在运算符后换行，下一行会增加两个层级的缩进。例外，当给变量赋值时，第二行的位置应当和赋值运算符的位置保持对齐；</li>\n<li>空行<ul>\n<li>在方法之间。</li>\n<li>在方法中的局部变量和第一条语句之间。</li>\n<li>在多行或单行注释之前。</li>\n<li>在方法内的逻辑片段之间插入空行。</li>\n</ul>\n</li>\n<li>命名，通常采用驼峰式命名。<ul>\n<li>变量名，驼峰命名，前缀为名词，如myName。</li>\n<li>函数和方法名，驼峰命名，前缀为动词，如isEnabled</li>\n<li>常量，使用大写字母和下划线来命名，下划线用以分隔单词，如MAX_COUNT。</li>\n<li>构造函数，大驼峰命名，常为名词（前面一般会有new运算符），如Person。</li>\n<li>直接量，<ul>\n<li>字符串，双引号或单引号括起来，多行时，使用 + 连接；</li>\n<li>数字，禁止八进制直接量；</li>\n<li>null，可看成对象的占位符。<br>*　undefined，禁止使用特殊值undefined，可有效地确保只有一种情况下typeof才会返回”undefined“；当变量未声明时，若使用了一个可能赋值为一个对象的变量事，将其赋值为null。</li>\n<li>对象直接量，直接将所有的属性写在花括号里。</li>\n<li>数组直接量，使用方括号将数组初始元素括起来。</li>\n<li>对象直接量，直接将所有的属性写在花括号里。</li>\n<li>数组直接量，使用方括号将数组初始元素括起来。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"二、注释\"><a href=\"#二、注释\" class=\"headerlink\" title=\"二、注释\"></a>二、注释</h2><ol>\n<li>单行注释，// 这是单行注释。 （三种使用方式）<ul>\n<li>独占一行，解释下一行代码。这行注释之前总有一个空行，且缩进和下一行代码保持一致。</li>\n<li>在代码行的尾部，代码结束到注释之间至少有一个缩进。注：代码及注释不应超过单行最大字符数限制，若超过，则将注释提于代码行上方。</li>\n<li>注释大段代码</li>\n</ul>\n</li>\n<li>多行注释，以斜杠加星号开头，星号加斜杠结束。总在代码段之前，注释和代码之间没有空行间隔。多行注释前应有空行，且缩进和要描述的代码一致。</li>\n<li>使用注释，一般原则是在需要让代码变得更清晰时添加注释。<ul>\n<li>代码难于理解时使用。</li>\n<li>代码可能被文认为是错误的时使用。     </li>\n<li>代码为浏览器特性hack时使用。</li>\n</ul>\n</li>\n<li>文档注释，以斜杠加两个星号开头，接下来是描述信息，其中使用@符号来表示一个或多个属性。使用时，应该确保对如下内容添加注释。<ul>\n<li>所有的方法，应当对方法、期望的参数和可能的返回值添加注释描述。</li>\n<li>所有的构造函数，应当对自定义类型和期望的参数添加注释描述。</li>\n<li>所有包含文档化方法的对象，若一个对象包含一个或多个附带文档注释的方法，则也应适当地针对文档生成工具添加文档注释。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"三、语句和表达式\"><a href=\"#三、语句和表达式\" class=\"headerlink\" title=\"三、语句和表达式\"></a>三、语句和表达式</h2><ol>\n<li><p>花括号的对齐方式：</p>\n<ul>\n<li><p>左花括号放置在块语句中第一句代码的末尾（推荐）</p>\n<pre><code>if(condition) {\n    doSomething();\n} else {\n    doSomething();\n}\n</code></pre></li>\n<li><p>左花括号放置于块语句首行的下一行</p>\n<pre><code>if (condition)\n{\n    doSomething();\n}\nelse\n{\n    doSomething();\n}\n</code></pre></li>\n</ul>\n</li>\n<li><p>块语句间隔</p>\n<ul>\n<li><p>在语句名、圆括号和左花括号之间没有空格间隔。</p>\n<pre><code>if(condition){\n    doSomething();\n}\n</code></pre></li>\n<li><p>在括左圆括号之前和右圆括号之后各加一个空格。(推荐)</p>\n<pre><code>if (condition) {\n    doSomething();\n}\n</code></pre></li>\n<li><p>在左圆括号后和右圆括号前各添加一个空格。</p>\n<pre><code>if ( condition ) {\n    doSomething();\n}\n</code></pre></li>\n</ul>\n</li>\n<li><p>switch语句</p>\n<ul>\n<li>缩进：<ul>\n<li>每条case语句相对于switch关键字都缩进一个层级</li>\n<li>从第二天case语句开始，每条case语句前后各有一个空行</li>\n</ul>\n</li>\n<li>case语句的“连续执行”，即case语句结束后不添加break之类的结尾。 只要加上合适的注释，是可以不加结尾的。</li>\n</ul>\n</li>\n<li><p>for循环</p>\n<ul>\n<li>使用break可立即退出循环</li>\n<li>使用continue可立即退出本次循环</li>\n</ul>\n</li>\n<li><p>for-in循环，遍历对象属性，返回属性名，不应该遍历数组。使用hasOwnProperty（）过滤出实例属性</p>\n</li>\n</ol>\n<h2 id=\"四、变量、函数和运算符\"><a href=\"#四、变量、函数和运算符\" class=\"headerlink\" title=\"四、变量、函数和运算符\"></a>四、变量、函数和运算符</h2><ol>\n<li><p>变量声明</p>\n<ul>\n<li>局部变量放在函数首顶部</li>\n<li>使用单var语句</li>\n</ul>\n</li>\n<li><p>函数声明</p>\n<ul>\n<li>先声明后使用函数</li>\n<li>函数声明应当在条件语句外部使用</li>\n</ul>\n</li>\n<li><p>函数调用间隔</p>\n<ul>\n<li><p>左括号之后和右括号之前加上空格</p>\n<pre><code>doSomething(function() {});\ndoSomething({ item: item });\ndoSomething([ item ]);\ndoSomething(&apos;hi&apos;);\n</code></pre></li>\n</ul>\n</li>\n<li><p>立即调用的函数 将函数用圆括号包裹起来</p>\n<pre><code>var value = (function() {\n    // 函数体\n    return {\n        messgae: &apos;hi&apos;\n    }\n}());\n</code></pre></li>\n<li><p>严格模式 ‘use strict’</p>\n<ul>\n<li>不用在全局作用域</li>\n<li>多个函数应用严格模式可使用立即执行的函数</li>\n</ul>\n</li>\n</ol>\n<pre><code>(function() {\n    &apos;use strict&apos;;\n    function doSomething() {\n\n    }\n    function doSomethingElse() {\n\n    }\n})\n</code></pre><ol>\n<li>相等 推荐用 === 和 !== ,不涉及强转</li>\n</ol>\n<h2 id=\"五、UI层的松耦合\"><a href=\"#五、UI层的松耦合\" class=\"headerlink\" title=\"五、UI层的松耦合\"></a>五、UI层的松耦合</h2><ol>\n<li>松耦合：修改一个组件而不需要更改其他组件</li>\n<li>将JavaScript从css中抽离（避免使用css表达式）</li>\n<li>将css从JavaScript中抽离（不应当直接操作样式）</li>\n<li>将JavaScript从HTML中抽离（最好将所有的JavaScript代码都放入外置文件中）</li>\n<li>将HTML从JavaScript中抽离<ul>\n<li>从服务器加载，即将模板放置于远程服务器（大量），少量的标签可采用客户端模板</li>\n<li>简单客户端模板，一些带“插槽”的标签片段，注释是和元素及文本一样的DOM节点；将模板数据嵌入到HTML页面里的第二个方法是使用一个带有自定义type属性的<script>元素</li>\n<li>复杂客户端模板，如Handlebars。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"六、避免使用全局变量\"><a href=\"#六、避免使用全局变量\" class=\"headerlink\" title=\"六、避免使用全局变量\"></a>六、避免使用全局变量</h2><ol>\n<li><p>全局变量带来的问题</p>\n<ul>\n<li>命名冲突</li>\n<li>代码的脆弱性，当定义函数时，最好尽可能多的将数据置于局部作用域内</li>\n<li>难以测试，确保函数不会对全部变量有依赖，增强代码的可测性</li>\n</ul>\n</li>\n<li><p>意外的全局变量</p>\n<ul>\n<li>总是使用var来定义变量，哪怕是定义全部变量</li>\n<li>给未声明的变量赋值，使用工具时会报警告。严格模式下会报错</li>\n</ul>\n</li>\n<li><p>单全局变量方式， 最佳方法是依赖尽可能少的全局变量，即只创建一个全局变量。如jQuery</p>\n<ul>\n<li>命名空间，将功能按照命名空间进行分组</li>\n<li>模块，一种通用的功能片段，如YUI，AMD等。使用AMD，需要模块加载器，如Dojs，RequireJs</li>\n</ul>\n</li>\n<li><p>零全局变量， 使用一个立即执行的函数调用并将所有脚本放入其中</p>\n</li>\n</ol>\n<h2 id=\"七、事件处理\"><a href=\"#七、事件处理\" class=\"headerlink\" title=\"七、事件处理\"></a>七、事件处理</h2><ol>\n<li>隔离应用逻辑，将应用逻辑和事件处理的代码拆分开来</li>\n<li>不要分发事件对象，最好让时间处理程序成为杰出到event对象的唯一函数。事件处理程序应当在进入应用逻辑之前针对event对象执行任何必要的操作，包括阻止默认事件或阻止事件冒泡，都应当直接包含在事件处理程序中</li>\n</ol>\n<h2 id=\"八、避免“空比较”\"><a href=\"#八、避免“空比较”\" class=\"headerlink\" title=\"八、避免“空比较”\"></a>八、避免“空比较”</h2><ol>\n<li>检测原始值,使用typeof<ul>\n<li>字符串，返回“string”</li>\n<li>数字，返回“number”</li>\n<li>布尔值，返回“boolean”</li>\n<li>undefined，返回“undefined”</li>\n</ul>\n</li>\n<li>检测引用值（对象），Object、Array、Date、Error,使用instanceof，语法 value instanceof constructor。 不仅检测构造这个对象的构造器，还检测原型链，也可检测自定义的类型。但是不检测函数和数组</li>\n<li><p>检测函数，使用typeof，返回“function”。在IE8和更早版本的IE浏览器中，检测DOM节点，返回“Object”（可用in）</p>\n<pre><code>if(&quot;querySelectorAll&quot; in document){\n    //代码块\n}\n</code></pre></li>\n<li>检测数组</li>\n</ol>\n<pre><code>function isArray(value) {\n    return Object.prototype.toString.call(value) === &quot;[object Array]&quot;;\n}\n</code></pre><ol>\n<li>检测属性，使用in，如果实例对象的属性存在、或者继承自对象的原型，dou返回true。若检测实例对象的某个属性时候存在，用hasOwnProperty（）方法。在IE8以及更早版本，DOM对象并非继承自Object。</li>\n</ol>\n<pre><code>//、如果沟不确定是否为DOM对象\nif(&quot;hasOwnProperty&quot; in Object &amp;&amp; Object.hasOwnProperty(&apos;related&apos;)){\n    // 代码块\n}\n</code></pre><h2 id=\"九、将配置数据从代码中分离出来\"><a href=\"#九、将配置数据从代码中分离出来\" class=\"headerlink\" title=\"九、将配置数据从代码中分离出来\"></a>九、将配置数据从代码中分离出来</h2><ol>\n<li>配置数据，是应用中写死的值，如URL，需要展现给用户的字符串，重复的值，设置（比如每页的配置项），任何可能发生变更的值</li>\n<li>抽离配置数据， 即将配置数据拿到外部</li>\n<li>保存配置数据， 放在单独的文件中。存储数据方式，<ul>\n<li>JSON 文件</li>\n</ul>\n</li>\n</ol>\n<pre><code>{\n    &quot;MSG_INVALID_VALUE&quot;: &quot;Invalid value&quot;,\n    &quot;URL_INVAILID&quot;: &quot;/errors/invalid.php&quot;,    \n    &quot;CSS_SELECTED&quot;: &quot;selected&quot;\n}\n</code></pre><ul>\n<li><p>JSONP, 将JSON结构用一个函数包装起来</p>\n<pre><code>myFunc({\n    &quot;MSG_INVALID_VALUE&quot;: &quot;Invalid value&quot;,\n    &quot;URL_INVAILID&quot;: &quot;/errors/invalid.php&quot;,    \n    &quot;CSS_SELECTED&quot;: &quot;selected&quot;\n})\n</code></pre></li>\n<li><p>纯JavaScript，将JSON对象赋值为一个变量，这个变量会被程序用到</p>\n<pre><code>var config = {\n    &quot;MSG_INVALID_VALUE&quot;: &quot;Invalid value&quot;,\n    &quot;URL_INVAILID&quot;: &quot;/errors/invalid.php&quot;,    \n    &quot;CSS_SELECTED&quot;: &quot;selected&quot;\n}\n</code></pre></li>\n</ul>\n<h2 id=\"十、抛出自定义错误\"><a href=\"#十、抛出自定义错误\" class=\"headerlink\" title=\"十、抛出自定义错误\"></a>十、抛出自定义错误</h2><ol>\n<li><p>在js中抛出错误，Error对象</p>\n<pre><code>throw new Error(&quot;Something bad happened&quot;)\n</code></pre><p>注：没有通过try-catch语句捕获，抛出任何值都将引发一个错误</p>\n</li>\n<li><p>抛出错误的好处，能够明确问题所在。推荐总是在错误消息中包含函数名称以及函数失败的原因</p>\n</li>\n<li>何时抛出错误，最佳地方在工具函数中。经验法则：<ul>\n<li>一旦修复了一个很难调试的额错误，尝试增加一两个自定义错误</li>\n<li>如果正在写代码，思考一下：“我希望[某些事情]不会发生，如果发生，代码会一团糟”</li>\n<li>若在编写别人的代码，思考一下其使用方式，在特定的情况下抛出错误</li>\n</ul>\n</li>\n<li><p>try-catch语句。可能引发错误的代码放在try块中，处理错误的代码放在catch中。finally放一定会被执行的代码</p>\n<pre><code>try{\n    SomethingThatMightCauseAnError();\n}catch(ex){\n    handleError(ex);\n}finally{\n    continueDoingOtherStuff();\n}\n</code></pre></li>\n</ol>\n<ol>\n<li><p>错误类型</p>\n<pre><code>Error  //所有错误的基本类型\nEvalError  // 通过eval()函数执行代码发生错误时抛出\nRangeError // 一个数字超出它的边界时抛出\nReferenceError // 期望的对象存在时抛出\nSyntaxError // 给eval()函数传递的代码中有语法错误时抛出\nTypeError  // 变量不是期望的类型时抛出\nURIError // 给encodeURI()、encodeURIComponent()、decodeURI()或者decodeURIComponent()等函数传递格式非法的URI字符串时抛出\n</code></pre></li>\n</ol>\n<h2 id=\"十一、不是你的对象不要动\"><a href=\"#十一、不是你的对象不要动\" class=\"headerlink\" title=\"十一、不是你的对象不要动\"></a>十一、不是你的对象不要动</h2><ol>\n<li>什么是你的。若你的代码没有创建这些对象，不要修改它们。包括：<ul>\n<li>原生对象（Object、Array 等）</li>\n<li>DOM对象（如document）</li>\n<li>浏览器对象模型（BOM）对象（例如，window）</li>\n<li>类库的对象</li>\n</ul>\n</li>\n<li><p>原则</p>\n<ul>\n<li><p>不覆盖方法</p>\n<pre><code>// 不好的写法\ndocument._originalGetElementById = document.getElementById;\ndocument.getElementById = function (id) {\n    if( id == &apos;window&apos;){\n        return window;\n    }else{\n        return document._originalGetElementById(id);_\n    }\n};\n</code></pre></li>\n</ul>\n</li>\n</ol>\n<ul>\n<li>不新增方法</li>\n</ul>\n<pre><code>//不好的写法，在DOM对象上增加了方法\ndocument.sayImAwesome = function() {\n    alert(&quot;You&apos;re awesome&quot;);\n}\n\n// 不好的写法，在原生对象上增加了方法\nArray.prototype.reverseSort = function() {\n    return this.sort().reverse();\n}\n\n// 不好的写法，在库对象上增加了方法\nYUI.doSomething = function() {\n    // 代码\n}\n</code></pre><ul>\n<li>不删除方法，一是给对应的名字赋值为null，二是使用delete操作符在删除（如果在prototype的属性或方法上使用delete是不起作用的）<ol>\n<li>更好的途径，基于对象的继承和基于类型的继承</li>\n</ol>\n</li>\n</ul>\n<ul>\n<li><p>基于对象的继承，也叫原型继承，一个对象继承另外一个对象是不需要调用构造函数的。如ECMAScript5的Object.create()方法</p>\n<pre><code>var person = {\n    name: &quot;Bob&quot;,\n    sayName: function(){\n        console.log(this.name);\n    }\n}\n// 创建新对象 继承自person，可访问其属性和方法\nvar myPerson = Object.create(person);\nmyPerson.sayName();  // Bob\n\n// 重新定义 myPerson.sayName，则切断对person.sayName的访问\nmyPerson.sayName = function(){\n    console.log(&apos;mom&apos;);\n}\nmyPerson.sayName(); // mom\nperson.sayName(); // Bob\n\n// Object.create()可指定第二个参数，该参数对象中的属性和方法将添加到新的对象中\nvar myPerson = Object.create(person,{\n    name: {\n        value: &apos;Dad&apos;\n    }\n})\nmyPerson.sayName(); // Dad\nperson.sayName(); // Bob\n</code></pre></li>\n<li><p>基于类型的继承，通过构造函数实现，需要访问被继承对象的构造函数。需要两步：首先，原型继承；然后，构造器继承。构造器继承是调用超类的构造函数时传入新建的对象作为其this的值</p>\n<pre><code>function Person(name){\n    this.name;\n}\n\nfunction Author(name){\n    Person.call(this,name); // 构造器继承\n}\n\nAuthor.prototype = new Person();\n</code></pre></li>\n<li><p>门面模式，为一个已存在的对象创建一个新的接口。门面实现一个特定的接口，让一个对象看起来像另一个对象，就称作适配器。门面和适配器唯一的不同是前者创建新接口，后者实现已存在的接口</p>\n<pre><code>function DOMWrapper(ele){\n    this.ele = ele;\n}\n\nDOMWrapper.prototype.addClass = function(className){\n    ele.className += &quot; &quot; + className;\n}\n\nDOMWrapper.prototype.remove = function() {\n    this.ele.parentNode.removeChild(this.ele);\n}\n\nvar wrapper = new DOMWrapper(document.getElementById(&apos;my-div&apos;));\nwrapper.addClass(&apos;selected&apos;);\nwrapper.remove();\n</code></pre></li>\n</ul>\n<ol>\n<li><p>阻止修改，三种锁定修改的级别，每种都拥有两个方法：一个用来实施操作，一个用来检测是否应用了相应的操作</p>\n<ul>\n<li><p>防止扩展，禁止为对象“添加”属性和方法，但已存在的属性和方法是可以被修改或删除</p>\n<pre><code>//Object.preventExtension(), Object.isExtensible()\nvar person = {\n    name: &apos;bob&apos;\n};\n//锁定对象\nObject.preventExtensions(person);\nconsole.log(Object.isExtensible(person)); // false\nperson.age = 25; //正常情况悄悄的失败，除非在strict模式下抛出错误\n</code></pre></li>\n<li><p>密封，类似“防止扩展”，而且禁止为对象“删除”已存在的属性和方法</p>\n<pre><code>//Object.seal()密封对象,Object.isSealed()\nObject.seal(person);\nconsole.log(Object.isExtensible(person)); // false\nconsole.log(Object.isSealed(person)); // true\ndelete person.name; // false 正常情况悄悄的失败，除非是在strict模式下抛出错误\nperson.age = 25;\n</code></pre></li>\n<li><p>冻结，类似“密封”，而且禁止为对象“删除”已存在的属性和方法（所有字段均为只读）</p>\n<pre><code>//Object.freeze()冻结，Object.isFrozen()\nObject.freeze(person);\nconsole.log(Object.isExtensible(person)); // false\nconsole.log(Object.isSealed(person)); // true\nconsole.log(Object.isFrozen(person)); // true\nperson.name = &apos;mom&apos;; //\nperson.age = 25; //同上\ndelete person.name; //同上\n\n// 被冻结的对象同时也是不可扩展和被密封的，故调用Object.isExtensible()返回false，调用Object.isSealed()返回true\n// 被冻结的对象和被密封的对象最大的区别在于，前者禁止任何对已存在属性和方法的修改\n</code></pre></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"十二、浏览器嗅探\"><a href=\"#十二、浏览器嗅探\" class=\"headerlink\" title=\"十二、浏览器嗅探\"></a>十二、浏览器嗅探</h2></script></li></ul></li></ol>","site":{"data":{}},"excerpt":"<p>任何语言都需要强调编码风格的一致性。增强代码的可读性，可维护性是相当重要的。本书讲述的技巧和技术比较实用。<br>","more":"</p>\n<h2 id=\"一、基本的格式化\"><a href=\"#一、基本的格式化\" class=\"headerlink\" title=\"一、基本的格式化\"></a>一、基本的格式化</h2><ol>\n<li>代码缩进，建议4个空格字符为一个缩进层次，或使用tab缩进（一般编辑器默认为4个空格）；</li>\n<li>语句结尾，建议不要省略分号；</li>\n<li>行的长度，建议不超过80个字符；</li>\n<li>换行，通常在运算符后换行，下一行会增加两个层级的缩进。例外，当给变量赋值时，第二行的位置应当和赋值运算符的位置保持对齐；</li>\n<li>空行<ul>\n<li>在方法之间。</li>\n<li>在方法中的局部变量和第一条语句之间。</li>\n<li>在多行或单行注释之前。</li>\n<li>在方法内的逻辑片段之间插入空行。</li>\n</ul>\n</li>\n<li>命名，通常采用驼峰式命名。<ul>\n<li>变量名，驼峰命名，前缀为名词，如myName。</li>\n<li>函数和方法名，驼峰命名，前缀为动词，如isEnabled</li>\n<li>常量，使用大写字母和下划线来命名，下划线用以分隔单词，如MAX_COUNT。</li>\n<li>构造函数，大驼峰命名，常为名词（前面一般会有new运算符），如Person。</li>\n<li>直接量，<ul>\n<li>字符串，双引号或单引号括起来，多行时，使用 + 连接；</li>\n<li>数字，禁止八进制直接量；</li>\n<li>null，可看成对象的占位符。<br>*　undefined，禁止使用特殊值undefined，可有效地确保只有一种情况下typeof才会返回”undefined“；当变量未声明时，若使用了一个可能赋值为一个对象的变量事，将其赋值为null。</li>\n<li>对象直接量，直接将所有的属性写在花括号里。</li>\n<li>数组直接量，使用方括号将数组初始元素括起来。</li>\n<li>对象直接量，直接将所有的属性写在花括号里。</li>\n<li>数组直接量，使用方括号将数组初始元素括起来。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"二、注释\"><a href=\"#二、注释\" class=\"headerlink\" title=\"二、注释\"></a>二、注释</h2><ol>\n<li>单行注释，// 这是单行注释。 （三种使用方式）<ul>\n<li>独占一行，解释下一行代码。这行注释之前总有一个空行，且缩进和下一行代码保持一致。</li>\n<li>在代码行的尾部，代码结束到注释之间至少有一个缩进。注：代码及注释不应超过单行最大字符数限制，若超过，则将注释提于代码行上方。</li>\n<li>注释大段代码</li>\n</ul>\n</li>\n<li>多行注释，以斜杠加星号开头，星号加斜杠结束。总在代码段之前，注释和代码之间没有空行间隔。多行注释前应有空行，且缩进和要描述的代码一致。</li>\n<li>使用注释，一般原则是在需要让代码变得更清晰时添加注释。<ul>\n<li>代码难于理解时使用。</li>\n<li>代码可能被文认为是错误的时使用。     </li>\n<li>代码为浏览器特性hack时使用。</li>\n</ul>\n</li>\n<li>文档注释，以斜杠加两个星号开头，接下来是描述信息，其中使用@符号来表示一个或多个属性。使用时，应该确保对如下内容添加注释。<ul>\n<li>所有的方法，应当对方法、期望的参数和可能的返回值添加注释描述。</li>\n<li>所有的构造函数，应当对自定义类型和期望的参数添加注释描述。</li>\n<li>所有包含文档化方法的对象，若一个对象包含一个或多个附带文档注释的方法，则也应适当地针对文档生成工具添加文档注释。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"三、语句和表达式\"><a href=\"#三、语句和表达式\" class=\"headerlink\" title=\"三、语句和表达式\"></a>三、语句和表达式</h2><ol>\n<li><p>花括号的对齐方式：</p>\n<ul>\n<li><p>左花括号放置在块语句中第一句代码的末尾（推荐）</p>\n<pre><code>if(condition) {\n    doSomething();\n} else {\n    doSomething();\n}\n</code></pre></li>\n<li><p>左花括号放置于块语句首行的下一行</p>\n<pre><code>if (condition)\n{\n    doSomething();\n}\nelse\n{\n    doSomething();\n}\n</code></pre></li>\n</ul>\n</li>\n<li><p>块语句间隔</p>\n<ul>\n<li><p>在语句名、圆括号和左花括号之间没有空格间隔。</p>\n<pre><code>if(condition){\n    doSomething();\n}\n</code></pre></li>\n<li><p>在括左圆括号之前和右圆括号之后各加一个空格。(推荐)</p>\n<pre><code>if (condition) {\n    doSomething();\n}\n</code></pre></li>\n<li><p>在左圆括号后和右圆括号前各添加一个空格。</p>\n<pre><code>if ( condition ) {\n    doSomething();\n}\n</code></pre></li>\n</ul>\n</li>\n<li><p>switch语句</p>\n<ul>\n<li>缩进：<ul>\n<li>每条case语句相对于switch关键字都缩进一个层级</li>\n<li>从第二天case语句开始，每条case语句前后各有一个空行</li>\n</ul>\n</li>\n<li>case语句的“连续执行”，即case语句结束后不添加break之类的结尾。 只要加上合适的注释，是可以不加结尾的。</li>\n</ul>\n</li>\n<li><p>for循环</p>\n<ul>\n<li>使用break可立即退出循环</li>\n<li>使用continue可立即退出本次循环</li>\n</ul>\n</li>\n<li><p>for-in循环，遍历对象属性，返回属性名，不应该遍历数组。使用hasOwnProperty（）过滤出实例属性</p>\n</li>\n</ol>\n<h2 id=\"四、变量、函数和运算符\"><a href=\"#四、变量、函数和运算符\" class=\"headerlink\" title=\"四、变量、函数和运算符\"></a>四、变量、函数和运算符</h2><ol>\n<li><p>变量声明</p>\n<ul>\n<li>局部变量放在函数首顶部</li>\n<li>使用单var语句</li>\n</ul>\n</li>\n<li><p>函数声明</p>\n<ul>\n<li>先声明后使用函数</li>\n<li>函数声明应当在条件语句外部使用</li>\n</ul>\n</li>\n<li><p>函数调用间隔</p>\n<ul>\n<li><p>左括号之后和右括号之前加上空格</p>\n<pre><code>doSomething(function() {});\ndoSomething({ item: item });\ndoSomething([ item ]);\ndoSomething(&apos;hi&apos;);\n</code></pre></li>\n</ul>\n</li>\n<li><p>立即调用的函数 将函数用圆括号包裹起来</p>\n<pre><code>var value = (function() {\n    // 函数体\n    return {\n        messgae: &apos;hi&apos;\n    }\n}());\n</code></pre></li>\n<li><p>严格模式 ‘use strict’</p>\n<ul>\n<li>不用在全局作用域</li>\n<li>多个函数应用严格模式可使用立即执行的函数</li>\n</ul>\n</li>\n</ol>\n<pre><code>(function() {\n    &apos;use strict&apos;;\n    function doSomething() {\n\n    }\n    function doSomethingElse() {\n\n    }\n})\n</code></pre><ol>\n<li>相等 推荐用 === 和 !== ,不涉及强转</li>\n</ol>\n<h2 id=\"五、UI层的松耦合\"><a href=\"#五、UI层的松耦合\" class=\"headerlink\" title=\"五、UI层的松耦合\"></a>五、UI层的松耦合</h2><ol>\n<li>松耦合：修改一个组件而不需要更改其他组件</li>\n<li>将JavaScript从css中抽离（避免使用css表达式）</li>\n<li>将css从JavaScript中抽离（不应当直接操作样式）</li>\n<li>将JavaScript从HTML中抽离（最好将所有的JavaScript代码都放入外置文件中）</li>\n<li>将HTML从JavaScript中抽离<ul>\n<li>从服务器加载，即将模板放置于远程服务器（大量），少量的标签可采用客户端模板</li>\n<li>简单客户端模板，一些带“插槽”的标签片段，注释是和元素及文本一样的DOM节点；将模板数据嵌入到HTML页面里的第二个方法是使用一个带有自定义type属性的<script>元素</li>\n<li>复杂客户端模板，如Handlebars。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"六、避免使用全局变量\"><a href=\"#六、避免使用全局变量\" class=\"headerlink\" title=\"六、避免使用全局变量\"></a>六、避免使用全局变量</h2><ol>\n<li><p>全局变量带来的问题</p>\n<ul>\n<li>命名冲突</li>\n<li>代码的脆弱性，当定义函数时，最好尽可能多的将数据置于局部作用域内</li>\n<li>难以测试，确保函数不会对全部变量有依赖，增强代码的可测性</li>\n</ul>\n</li>\n<li><p>意外的全局变量</p>\n<ul>\n<li>总是使用var来定义变量，哪怕是定义全部变量</li>\n<li>给未声明的变量赋值，使用工具时会报警告。严格模式下会报错</li>\n</ul>\n</li>\n<li><p>单全局变量方式， 最佳方法是依赖尽可能少的全局变量，即只创建一个全局变量。如jQuery</p>\n<ul>\n<li>命名空间，将功能按照命名空间进行分组</li>\n<li>模块，一种通用的功能片段，如YUI，AMD等。使用AMD，需要模块加载器，如Dojs，RequireJs</li>\n</ul>\n</li>\n<li><p>零全局变量， 使用一个立即执行的函数调用并将所有脚本放入其中</p>\n</li>\n</ol>\n<h2 id=\"七、事件处理\"><a href=\"#七、事件处理\" class=\"headerlink\" title=\"七、事件处理\"></a>七、事件处理</h2><ol>\n<li>隔离应用逻辑，将应用逻辑和事件处理的代码拆分开来</li>\n<li>不要分发事件对象，最好让时间处理程序成为杰出到event对象的唯一函数。事件处理程序应当在进入应用逻辑之前针对event对象执行任何必要的操作，包括阻止默认事件或阻止事件冒泡，都应当直接包含在事件处理程序中</li>\n</ol>\n<h2 id=\"八、避免“空比较”\"><a href=\"#八、避免“空比较”\" class=\"headerlink\" title=\"八、避免“空比较”\"></a>八、避免“空比较”</h2><ol>\n<li>检测原始值,使用typeof<ul>\n<li>字符串，返回“string”</li>\n<li>数字，返回“number”</li>\n<li>布尔值，返回“boolean”</li>\n<li>undefined，返回“undefined”</li>\n</ul>\n</li>\n<li>检测引用值（对象），Object、Array、Date、Error,使用instanceof，语法 value instanceof constructor。 不仅检测构造这个对象的构造器，还检测原型链，也可检测自定义的类型。但是不检测函数和数组</li>\n<li><p>检测函数，使用typeof，返回“function”。在IE8和更早版本的IE浏览器中，检测DOM节点，返回“Object”（可用in）</p>\n<pre><code>if(&quot;querySelectorAll&quot; in document){\n    //代码块\n}\n</code></pre></li>\n<li>检测数组</li>\n</ol>\n<pre><code>function isArray(value) {\n    return Object.prototype.toString.call(value) === &quot;[object Array]&quot;;\n}\n</code></pre><ol>\n<li>检测属性，使用in，如果实例对象的属性存在、或者继承自对象的原型，dou返回true。若检测实例对象的某个属性时候存在，用hasOwnProperty（）方法。在IE8以及更早版本，DOM对象并非继承自Object。</li>\n</ol>\n<pre><code>//、如果沟不确定是否为DOM对象\nif(&quot;hasOwnProperty&quot; in Object &amp;&amp; Object.hasOwnProperty(&apos;related&apos;)){\n    // 代码块\n}\n</code></pre><h2 id=\"九、将配置数据从代码中分离出来\"><a href=\"#九、将配置数据从代码中分离出来\" class=\"headerlink\" title=\"九、将配置数据从代码中分离出来\"></a>九、将配置数据从代码中分离出来</h2><ol>\n<li>配置数据，是应用中写死的值，如URL，需要展现给用户的字符串，重复的值，设置（比如每页的配置项），任何可能发生变更的值</li>\n<li>抽离配置数据， 即将配置数据拿到外部</li>\n<li>保存配置数据， 放在单独的文件中。存储数据方式，<ul>\n<li>JSON 文件</li>\n</ul>\n</li>\n</ol>\n<pre><code>{\n    &quot;MSG_INVALID_VALUE&quot;: &quot;Invalid value&quot;,\n    &quot;URL_INVAILID&quot;: &quot;/errors/invalid.php&quot;,    \n    &quot;CSS_SELECTED&quot;: &quot;selected&quot;\n}\n</code></pre><ul>\n<li><p>JSONP, 将JSON结构用一个函数包装起来</p>\n<pre><code>myFunc({\n    &quot;MSG_INVALID_VALUE&quot;: &quot;Invalid value&quot;,\n    &quot;URL_INVAILID&quot;: &quot;/errors/invalid.php&quot;,    \n    &quot;CSS_SELECTED&quot;: &quot;selected&quot;\n})\n</code></pre></li>\n<li><p>纯JavaScript，将JSON对象赋值为一个变量，这个变量会被程序用到</p>\n<pre><code>var config = {\n    &quot;MSG_INVALID_VALUE&quot;: &quot;Invalid value&quot;,\n    &quot;URL_INVAILID&quot;: &quot;/errors/invalid.php&quot;,    \n    &quot;CSS_SELECTED&quot;: &quot;selected&quot;\n}\n</code></pre></li>\n</ul>\n<h2 id=\"十、抛出自定义错误\"><a href=\"#十、抛出自定义错误\" class=\"headerlink\" title=\"十、抛出自定义错误\"></a>十、抛出自定义错误</h2><ol>\n<li><p>在js中抛出错误，Error对象</p>\n<pre><code>throw new Error(&quot;Something bad happened&quot;)\n</code></pre><p>注：没有通过try-catch语句捕获，抛出任何值都将引发一个错误</p>\n</li>\n<li><p>抛出错误的好处，能够明确问题所在。推荐总是在错误消息中包含函数名称以及函数失败的原因</p>\n</li>\n<li>何时抛出错误，最佳地方在工具函数中。经验法则：<ul>\n<li>一旦修复了一个很难调试的额错误，尝试增加一两个自定义错误</li>\n<li>如果正在写代码，思考一下：“我希望[某些事情]不会发生，如果发生，代码会一团糟”</li>\n<li>若在编写别人的代码，思考一下其使用方式，在特定的情况下抛出错误</li>\n</ul>\n</li>\n<li><p>try-catch语句。可能引发错误的代码放在try块中，处理错误的代码放在catch中。finally放一定会被执行的代码</p>\n<pre><code>try{\n    SomethingThatMightCauseAnError();\n}catch(ex){\n    handleError(ex);\n}finally{\n    continueDoingOtherStuff();\n}\n</code></pre></li>\n</ol>\n<ol>\n<li><p>错误类型</p>\n<pre><code>Error  //所有错误的基本类型\nEvalError  // 通过eval()函数执行代码发生错误时抛出\nRangeError // 一个数字超出它的边界时抛出\nReferenceError // 期望的对象存在时抛出\nSyntaxError // 给eval()函数传递的代码中有语法错误时抛出\nTypeError  // 变量不是期望的类型时抛出\nURIError // 给encodeURI()、encodeURIComponent()、decodeURI()或者decodeURIComponent()等函数传递格式非法的URI字符串时抛出\n</code></pre></li>\n</ol>\n<h2 id=\"十一、不是你的对象不要动\"><a href=\"#十一、不是你的对象不要动\" class=\"headerlink\" title=\"十一、不是你的对象不要动\"></a>十一、不是你的对象不要动</h2><ol>\n<li>什么是你的。若你的代码没有创建这些对象，不要修改它们。包括：<ul>\n<li>原生对象（Object、Array 等）</li>\n<li>DOM对象（如document）</li>\n<li>浏览器对象模型（BOM）对象（例如，window）</li>\n<li>类库的对象</li>\n</ul>\n</li>\n<li><p>原则</p>\n<ul>\n<li><p>不覆盖方法</p>\n<pre><code>// 不好的写法\ndocument._originalGetElementById = document.getElementById;\ndocument.getElementById = function (id) {\n    if( id == &apos;window&apos;){\n        return window;\n    }else{\n        return document._originalGetElementById(id);_\n    }\n};\n</code></pre></li>\n</ul>\n</li>\n</ol>\n<ul>\n<li>不新增方法</li>\n</ul>\n<pre><code>//不好的写法，在DOM对象上增加了方法\ndocument.sayImAwesome = function() {\n    alert(&quot;You&apos;re awesome&quot;);\n}\n\n// 不好的写法，在原生对象上增加了方法\nArray.prototype.reverseSort = function() {\n    return this.sort().reverse();\n}\n\n// 不好的写法，在库对象上增加了方法\nYUI.doSomething = function() {\n    // 代码\n}\n</code></pre><ul>\n<li>不删除方法，一是给对应的名字赋值为null，二是使用delete操作符在删除（如果在prototype的属性或方法上使用delete是不起作用的）<ol>\n<li>更好的途径，基于对象的继承和基于类型的继承</li>\n</ol>\n</li>\n</ul>\n<ul>\n<li><p>基于对象的继承，也叫原型继承，一个对象继承另外一个对象是不需要调用构造函数的。如ECMAScript5的Object.create()方法</p>\n<pre><code>var person = {\n    name: &quot;Bob&quot;,\n    sayName: function(){\n        console.log(this.name);\n    }\n}\n// 创建新对象 继承自person，可访问其属性和方法\nvar myPerson = Object.create(person);\nmyPerson.sayName();  // Bob\n\n// 重新定义 myPerson.sayName，则切断对person.sayName的访问\nmyPerson.sayName = function(){\n    console.log(&apos;mom&apos;);\n}\nmyPerson.sayName(); // mom\nperson.sayName(); // Bob\n\n// Object.create()可指定第二个参数，该参数对象中的属性和方法将添加到新的对象中\nvar myPerson = Object.create(person,{\n    name: {\n        value: &apos;Dad&apos;\n    }\n})\nmyPerson.sayName(); // Dad\nperson.sayName(); // Bob\n</code></pre></li>\n<li><p>基于类型的继承，通过构造函数实现，需要访问被继承对象的构造函数。需要两步：首先，原型继承；然后，构造器继承。构造器继承是调用超类的构造函数时传入新建的对象作为其this的值</p>\n<pre><code>function Person(name){\n    this.name;\n}\n\nfunction Author(name){\n    Person.call(this,name); // 构造器继承\n}\n\nAuthor.prototype = new Person();\n</code></pre></li>\n<li><p>门面模式，为一个已存在的对象创建一个新的接口。门面实现一个特定的接口，让一个对象看起来像另一个对象，就称作适配器。门面和适配器唯一的不同是前者创建新接口，后者实现已存在的接口</p>\n<pre><code>function DOMWrapper(ele){\n    this.ele = ele;\n}\n\nDOMWrapper.prototype.addClass = function(className){\n    ele.className += &quot; &quot; + className;\n}\n\nDOMWrapper.prototype.remove = function() {\n    this.ele.parentNode.removeChild(this.ele);\n}\n\nvar wrapper = new DOMWrapper(document.getElementById(&apos;my-div&apos;));\nwrapper.addClass(&apos;selected&apos;);\nwrapper.remove();\n</code></pre></li>\n</ul>\n<ol>\n<li><p>阻止修改，三种锁定修改的级别，每种都拥有两个方法：一个用来实施操作，一个用来检测是否应用了相应的操作</p>\n<ul>\n<li><p>防止扩展，禁止为对象“添加”属性和方法，但已存在的属性和方法是可以被修改或删除</p>\n<pre><code>//Object.preventExtension(), Object.isExtensible()\nvar person = {\n    name: &apos;bob&apos;\n};\n//锁定对象\nObject.preventExtensions(person);\nconsole.log(Object.isExtensible(person)); // false\nperson.age = 25; //正常情况悄悄的失败，除非在strict模式下抛出错误\n</code></pre></li>\n<li><p>密封，类似“防止扩展”，而且禁止为对象“删除”已存在的属性和方法</p>\n<pre><code>//Object.seal()密封对象,Object.isSealed()\nObject.seal(person);\nconsole.log(Object.isExtensible(person)); // false\nconsole.log(Object.isSealed(person)); // true\ndelete person.name; // false 正常情况悄悄的失败，除非是在strict模式下抛出错误\nperson.age = 25;\n</code></pre></li>\n<li><p>冻结，类似“密封”，而且禁止为对象“删除”已存在的属性和方法（所有字段均为只读）</p>\n<pre><code>//Object.freeze()冻结，Object.isFrozen()\nObject.freeze(person);\nconsole.log(Object.isExtensible(person)); // false\nconsole.log(Object.isSealed(person)); // true\nconsole.log(Object.isFrozen(person)); // true\nperson.name = &apos;mom&apos;; //\nperson.age = 25; //同上\ndelete person.name; //同上\n\n// 被冻结的对象同时也是不可扩展和被密封的，故调用Object.isExtensible()返回false，调用Object.isSealed()返回true\n// 被冻结的对象和被密封的对象最大的区别在于，前者禁止任何对已存在属性和方法的修改\n</code></pre></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"十二、浏览器嗅探\"><a href=\"#十二、浏览器嗅探\" class=\"headerlink\" title=\"十二、浏览器嗅探\"></a>十二、浏览器嗅探</h2></script></li></ul></li></ol>"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}